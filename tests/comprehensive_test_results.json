{
  "mcp-orchestrator": {
    "module_path": "/mnt/c/Users/Brandon/AAI/brain/modules/mcp-orchestrator.py",
    "prp_category": "BRAIN",
    "overall_status": "WARN",
    "import_success": true,
    "import_time": 0.5187139511108398,
    "import_error": null,
    "functional_tests": {
      "has_async_methods": true,
      "has_init_method": true
    },
    "performance_metrics": {
      "avg_import_time": 0.02088626225789388,
      "max_import_time": 0.036943674087524414,
      "file_size_kb": 21.4951171875,
      "total_lines": 531,
      "code_lines": 398
    },
    "issues": [
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 13,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 23,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 101,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 130,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 224,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 337,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 386,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [
      {
        "line": 12,
        "code": "# AAI Brain imports with fallbacks",
        "reason": "Unknown",
        "context": "import logging\nimport asyncio\nfrom typing import Dict, List, Any, Optional\nfrom datetime import datetime\n\n# AAI Brain imports with fallbacks\ntry:\n    from brain.core.module import BrainModule\n    from brain.core.confidence import AAIConfidenceScorer\n    BRAIN_AVAILABLE = True"
      },
      {
        "line": 22,
        "code": "# MCP Orchestration imports with fallbacks",
        "reason": "Exception handling: except ImportError:",
        "context": "except ImportError:\n    BrainModule = object\n    AAIConfidenceScorer = None\n    BRAIN_AVAILABLE = False\n\n# MCP Orchestration imports with fallbacks\ntry:\n    from agents.orchestration.primary_agent import PrimaryOrchestrationAgent\n    from agents.orchestration.models import DelegationRequest, AgentSpecialization\n    from mcp.server_manager import MCPServerManager"
      },
      {
        "line": 103,
        "code": "logger.warning(\"Orchestration components not available - using fallback mode\")",
        "reason": "Unknown",
        "context": "    async def _initialize_components(self):\n        \"\"\"Initialize orchestration components\"\"\"\n        \n        try:\n            if not ORCHESTRATION_AVAILABLE:\n                logger.warning(\"Orchestration components not available - using fallback mode\")\n                self.initialized = False\n                return\n            \n            # Initialize primary orchestration agent"
      },
      {
        "line": 226,
        "code": "return await self._fallback_orchestration(context)",
        "reason": "Unknown",
        "context": "        Returns:\n            Orchestration result\n        \"\"\"\n        try:\n            if not self.initialized or not self.orchestration_agent:\n                return await self._fallback_orchestration(context)\n            \n            # Create delegation request\n            request = DelegationRequest(\n                query=context.get(\"prompt\", \"\"),"
      },
      {
        "line": 286,
        "code": "return await self._fallback_orchestration(context, error=str(e))",
        "reason": "Exception handling: except Exception as e:",
        "context": "            \n            return result\n            \n        except Exception as e:\n            logger.error(f\"Orchestration failed: {e}\")\n            return await self._fallback_orchestration(context, error=str(e))\n    \n    async def _fallback_orchestration(self, context: Dict[str, Any], error: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"Provide fallback orchestration when components are unavailable\"\"\"\n        "
      },
      {
        "line": 288,
        "code": "async def _fallback_orchestration(self, context: Dict[str, Any], error: Optional[str] = None) -> Dict[str, Any]:",
        "reason": "Exception handling: except Exception as e:",
        "context": "            \n        except Exception as e:\n            logger.error(f\"Orchestration failed: {e}\")\n            return await self._fallback_orchestration(context, error=str(e))\n    \n    async def _fallback_orchestration(self, context: Dict[str, Any], error: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"Provide fallback orchestration when components are unavailable\"\"\"\n        \n        prompt = context.get(\"prompt\", \"\")\n        "
      },
      {
        "line": 289,
        "code": "\"\"\"Provide fallback orchestration when components are unavailable\"\"\"",
        "reason": "Exception handling: except Exception as e:",
        "context": "        except Exception as e:\n            logger.error(f\"Orchestration failed: {e}\")\n            return await self._fallback_orchestration(context, error=str(e))\n    \n    async def _fallback_orchestration(self, context: Dict[str, Any], error: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"Provide fallback orchestration when components are unavailable\"\"\"\n        \n        prompt = context.get(\"prompt\", \"\")\n        \n        # Simple analysis of what the request might need"
      },
      {
        "line": 319,
        "code": "\"fallback\": True,",
        "reason": "Error condition: \"warnings\": [f\"Orchestration unavailable: {error}\"] if error else [\"Orchestration components not available\"],",
        "context": "            \"execution_time_ms\": 0,\n            \"agent_utilization\": {agent: 1 for agent in likely_agents},\n            \"recommendations\": [\"Enable orchestration components for multi-agent coordination\"],\n            \"warnings\": [f\"Orchestration unavailable: {error}\"] if error else [\"Orchestration components not available\"],\n            \"results\": [],\n            \"fallback\": True,\n            \"likely_agents\": likely_agents\n        }\n    \n    async def get_orchestration_status(self) -> Dict[str, Any]:"
      },
      {
        "line": 439,
        "code": "\"ready\": self.initialized or True  # Always ready with fallback",
        "reason": "Unknown",
        "context": "                \"version\": self.version,\n                \"initialized\": self.initialized,\n                \"orchestration_count\": self.orchestration_count,\n                \"success_rate\": self.success_rate,\n                \"orchestration_available\": ORCHESTRATION_AVAILABLE,\n                \"ready\": self.initialized or True  # Always ready with fallback\n            }\n    \n    def get_module_status(self) -> Dict[str, Any]:\n        \"\"\"Get module status (standalone version)\"\"\""
      }
    ],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "asyncio",
      "logging",
      "datetime",
      "typing"
    ],
    "circular_imports": []
  },
  "tech-stack-expert": {
    "module_path": "/mnt/c/Users/Brandon/AAI/brain/modules/tech-stack-expert.py",
    "prp_category": "BRAIN",
    "overall_status": "WARN",
    "import_success": true,
    "import_time": 0.14137721061706543,
    "import_error": null,
    "functional_tests": {
      "has_async_methods": true,
      "has_init_method": true
    },
    "performance_metrics": {
      "avg_import_time": 0.013772805531819662,
      "max_import_time": 0.01802206039428711,
      "file_size_kb": 37.7841796875,
      "total_lines": 935,
      "code_lines": 718
    },
    "issues": [
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 14,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 24,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 130,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 161,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 273,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 356,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 398,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 434,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 464,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 495,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 687,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 762,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [
      {
        "line": 13,
        "code": "# AAI Brain imports with fallbacks",
        "reason": "Unknown",
        "context": "import logging\nimport asyncio\nfrom typing import Dict, List, Any, Optional\nfrom datetime import datetime\n\n# AAI Brain imports with fallbacks\ntry:\n    from brain.core.module import BrainModule\n    from brain.core.confidence import AAIConfidenceScorer\n    BRAIN_AVAILABLE = True"
      },
      {
        "line": 23,
        "code": "# Tech Expert imports with fallbacks",
        "reason": "Exception handling: except ImportError:",
        "context": "except ImportError:\n    BrainModule = object\n    AAIConfidenceScorer = None\n    BRAIN_AVAILABLE = False\n\n# Tech Expert imports with fallbacks\ntry:\n    from agents.tech_expert.conversation_engine import ConversationEngine\n    from agents.tech_expert.recommender import TechStackRecommender\n    from agents.tech_expert.models import ProjectRequirements, ApplicationType, UserScale, ExperienceLevel"
      },
      {
        "line": 132,
        "code": "logger.warning(\"Tech Expert components not available - using fallback mode\")",
        "reason": "Unknown",
        "context": "    async def _initialize_components(self):\n        \"\"\"Initialize tech expert components\"\"\"\n        \n        try:\n            if not TECH_EXPERT_AVAILABLE:\n                logger.warning(\"Tech Expert components not available - using fallback mode\")\n                self.initialized = False\n                return\n            \n            # Initialize core components"
      },
      {
        "line": 275,
        "code": "return await self._fallback_expertise(context)",
        "reason": "Unknown",
        "context": "        Returns:\n            Expertise result\n        \"\"\"\n        try:\n            if not self.initialized or not self.recommender:\n                return await self._fallback_expertise(context)\n            \n            prompt = context.get(\"prompt\", \"\")\n            \n            # Determine expertise type"
      },
      {
        "line": 316,
        "code": "return await self._fallback_expertise(context, error=str(e))",
        "reason": "Exception handling: except Exception as e:",
        "context": "            \n            return result\n            \n        except Exception as e:\n            logger.error(f\"Tech expertise failed: {e}\")\n            return await self._fallback_expertise(context, error=str(e))\n    \n    async def _determine_expertise_type(self, prompt: str) -> str:\n        \"\"\"Determine the type of expertise needed\"\"\"\n        "
      },
      {
        "line": 656,
        "code": "async def _fallback_expertise(self, context: Dict[str, Any], error: Optional[str] = None) -> Dict[str, Any]:",
        "reason": "Unknown",
        "context": "                \"Online courses and certification programs\"\n            ],\n            \"confidence\": 0.75\n        }\n    \n    async def _fallback_expertise(self, context: Dict[str, Any], error: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"Provide fallback tech expertise when components are unavailable\"\"\"\n        \n        prompt = context.get(\"prompt\", \"\")\n        "
      },
      {
        "line": 657,
        "code": "\"\"\"Provide fallback tech expertise when components are unavailable\"\"\"",
        "reason": "Unknown",
        "context": "            ],\n            \"confidence\": 0.75\n        }\n    \n    async def _fallback_expertise(self, context: Dict[str, Any], error: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"Provide fallback tech expertise when components are unavailable\"\"\"\n        \n        prompt = context.get(\"prompt\", \"\")\n        \n        return {"
      },
      {
        "line": 662,
        "code": "\"expertise_type\": \"fallback_guidance\",",
        "reason": "Unknown",
        "context": "        \"\"\"Provide fallback tech expertise when components are unavailable\"\"\"\n        \n        prompt = context.get(\"prompt\", \"\")\n        \n        return {\n            \"expertise_type\": \"fallback_guidance\",\n            \"advice\": \"For technology stack decisions, I recommend considering: team experience, project requirements, scalability needs, and community support.\",\n            \"general_recommendations\": [\n                \"Start with technologies your team knows well\",\n                \"Choose mature, well-documented solutions\","
      },
      {
        "line": 677,
        "code": "\"fallback\": True,",
        "reason": "Unknown",
        "context": "                \"Research technology options and trade-offs\",\n                \"Consider team training and skill development\",\n                \"Plan for iterative development and testing\"\n            ],\n            \"confidence\": 0.70,\n            \"fallback\": True,\n            \"error_message\": f\"Tech Expert components unavailable: {error}\" if error else \"Tech Expert components not available\"\n        }\n    \n    async def update_learning_metrics(self,"
      },
      {
        "line": 815,
        "code": "\"ready\": self.initialized or True  # Always ready with fallback",
        "reason": "Unknown",
        "context": "                \"version\": self.version,\n                \"initialized\": self.initialized,\n                \"total_consultations\": self.total_consultations,\n                \"success_rate\": self.successful_recommendations / max(1, self.total_consultations),\n                \"tech_expert_available\": TECH_EXPERT_AVAILABLE,\n                \"ready\": self.initialized or True  # Always ready with fallback\n            }\n    \n    def get_module_status(self) -> Dict[str, Any]:\n        \"\"\"Get module status (standalone version)\"\"\""
      }
    ],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "asyncio",
      "logging",
      "datetime",
      "typing"
    ],
    "circular_imports": []
  },
  "unified_enhancement_loader": {
    "module_path": "/mnt/c/Users/Brandon/AAI/brain/modules/unified_enhancement_loader.py",
    "prp_category": "BRAIN",
    "overall_status": "WARN",
    "import_success": true,
    "import_time": 0.08308911323547363,
    "import_error": null,
    "functional_tests": {
      "has_async_methods": true,
      "has_init_method": true
    },
    "performance_metrics": {
      "avg_import_time": 0.011225700378417969,
      "max_import_time": 0.013976335525512695,
      "file_size_kb": 30.796875,
      "total_lines": 774,
      "code_lines": 572
    },
    "issues": [
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 17,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 27,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 109,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 270,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 353,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 449,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 539,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 602,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 649,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [
      {
        "line": 26,
        "code": "# AAI Brain imports with fallbacks",
        "reason": "Unknown",
        "context": "    EnhancedCommandProcessor = None\n    EnhancementLayer = None\n    EnhancementTier = None\n    ENHANCED_PROCESSOR_AVAILABLE = False\n\n# AAI Brain imports with fallbacks\ntry:\n    from brain.core.module import BrainModule\n    from brain.core.confidence import AAIConfidenceScorer\n    BRAIN_AVAILABLE = True"
      },
      {
        "line": 111,
        "code": "logger.warning(\"Enhanced Command Processor not available - using fallback mode\")",
        "reason": "Unknown",
        "context": "    async def _initialize_components(self):\n        \"\"\"Initialize enhancement loader components\"\"\"\n        \n        try:\n            if not ENHANCED_PROCESSOR_AVAILABLE:\n                logger.warning(\"Enhanced Command Processor not available - using fallback mode\")\n                self.initialized = False\n                return\n            \n            # Initialize enhanced command processor"
      },
      {
        "line": 341,
        "code": "\"enhancement_layers\": [\"memory\", \"foundation\"],  # Fallback to basics",
        "reason": "Exception handling: except Exception as e:",
        "context": "        except Exception as e:\n            logger.error(f\"Enhancement trigger evaluation failed: {e}\")\n            return {\n                \"session_id\": f\"error_{self.session_counter}\",\n                \"activated_triggers\": [],\n                \"enhancement_layers\": [\"memory\", \"foundation\"],  # Fallback to basics\n                \"overall_confidence\": 0.70,\n                \"trigger_count\": 0,\n                \"evaluation_successful\": False,\n                \"error\": str(e)"
      },
      {
        "line": 454,
        "code": "return await self._fallback_coordination(context, trigger_results.get(\"error\"))",
        "reason": "Unknown",
        "context": "        try:\n            # Evaluate enhancement triggers\n            trigger_results = await self.evaluate_enhancement_triggers(context)\n            \n            if not trigger_results[\"evaluation_successful\"]:\n                return await self._fallback_coordination(context, trigger_results.get(\"error\"))\n            \n            # If no command processor available, return trigger results only\n            if not self.command_processor:\n                return {"
      },
      {
        "line": 499,
        "code": "return await self._fallback_coordination(context, str(e))",
        "reason": "Exception handling: except Exception as e:",
        "context": "            \n            return coordinated_result\n            \n        except Exception as e:\n            logger.error(f\"Enhancement coordination failed: {e}\")\n            return await self._fallback_coordination(context, str(e))\n    \n    def _generate_coordination_reasoning(self,\n                                       trigger_results: Dict[str, Any],\n                                       enhancement_result) -> str:"
      },
      {
        "line": 521,
        "code": "async def _fallback_coordination(self,",
        "reason": "Unknown",
        "context": "        else:\n            reasoning += \"Some enhancements encountered issues but coordination maintained.\"\n        \n        return reasoning\n    \n    async def _fallback_coordination(self, \n                                   context: Dict[str, Any],\n                                   error: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"Provide fallback coordination when full system unavailable\"\"\"\n        "
      },
      {
        "line": 524,
        "code": "\"\"\"Provide fallback coordination when full system unavailable\"\"\"",
        "reason": "Unknown",
        "context": "        return reasoning\n    \n    async def _fallback_coordination(self, \n                                   context: Dict[str, Any],\n                                   error: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"Provide fallback coordination when full system unavailable\"\"\"\n        \n        return {\n            \"coordination_mode\": \"fallback\",\n            \"enhancement_available\": False,"
      },
      {
        "line": 527,
        "code": "\"coordination_mode\": \"fallback\",",
        "reason": "Unknown",
        "context": "                                   context: Dict[str, Any],\n                                   error: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"Provide fallback coordination when full system unavailable\"\"\"\n        \n        return {\n            \"coordination_mode\": \"fallback\",\n            \"enhancement_available\": False,\n            \"fallback_layers\": [\"memory\", \"foundation\"],\n            \"reasoning\": f\"Enhancement coordination unavailable{': ' + error if error else ''}, using baseline intelligence\",\n            \"confidence\": 0.70,"
      },
      {
        "line": 529,
        "code": "\"fallback_layers\": [\"memory\", \"foundation\"],",
        "reason": "Unknown",
        "context": "        \"\"\"Provide fallback coordination when full system unavailable\"\"\"\n        \n        return {\n            \"coordination_mode\": \"fallback\",\n            \"enhancement_available\": False,\n            \"fallback_layers\": [\"memory\", \"foundation\"],\n            \"reasoning\": f\"Enhancement coordination unavailable{': ' + error if error else ''}, using baseline intelligence\",\n            \"confidence\": 0.70,\n            \"success\": True,\n            \"fallback\": True"
      },
      {
        "line": 533,
        "code": "\"fallback\": True",
        "reason": "Error condition: \"reasoning\": f\"Enhancement coordination unavailable{': ' + error if error else ''}, using baseline intelligence\",",
        "context": "            \"enhancement_available\": False,\n            \"fallback_layers\": [\"memory\", \"foundation\"],\n            \"reasoning\": f\"Enhancement coordination unavailable{': ' + error if error else ''}, using baseline intelligence\",\n            \"confidence\": 0.70,\n            \"success\": True,\n            \"fallback\": True\n        }\n    \n    async def get_enhancement_recommendations(self, context: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Get enhancement recommendations without executing them\"\"\""
      },
      {
        "line": 683,
        "code": "\"ready\": self.initialized or True  # Always ready with fallback",
        "reason": "Unknown",
        "context": "                \"name\": self.name,\n                \"version\": self.version,\n                \"initialized\": self.initialized,\n                \"total_triggers\": len(self.enhancement_triggers),\n                \"active_sessions\": len(self.active_sessions),\n                \"ready\": self.initialized or True  # Always ready with fallback\n            }\n\n\n# Initialize global loader instance"
      }
    ],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "typing",
      "logging",
      "dataclasses",
      "asyncio",
      "enum",
      "datetime"
    ],
    "circular_imports": []
  },
  "unified_intelligence_coordinator": {
    "module_path": "/mnt/c/Users/Brandon/AAI/brain/modules/unified_intelligence_coordinator.py",
    "prp_category": "BRAIN",
    "overall_status": "FAIL",
    "import_success": false,
    "import_time": 0.10649418830871582,
    "import_error": "NameError: name 'defaultdict' is not defined\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 995, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/brain/modules/unified_intelligence_coordinator.py\", line 1131, in <module>\n    unified_intelligence_coordinator = UnifiedIntelligenceCoordinator()\n                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/c/Users/Brandon/AAI/brain/modules/unified_intelligence_coordinator.py\", line 123, in __init__\n    \"mode_usage\": defaultdict(int),\n                  ^^^^^^^^^^^\nNameError: name 'defaultdict' is not defined\n",
    "functional_tests": {},
    "performance_metrics": {},
    "issues": [
      {
        "severity": "Critical",
        "type": "Import Failure",
        "details": "NameError: name 'defaultdict' is not defined\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 995, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/brain/modules/unified_intelligence_coordinator.py\", line 1131, in <module>\n    unified_intelligence_coordinator = UnifiedIntelligenceCoordinator()\n                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/c/Users/Brandon/AAI/brain/modules/unified_intelligence_coordinator.py\", line 123, in __init__\n    \"mode_usage\": defaultdict(int),\n                  ^^^^^^^^^^^\nNameError: name 'defaultdict' is not defined\n"
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 17,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 27,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 146,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 289,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 339,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 416,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 500,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 530,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 554,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 583,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 627,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 663,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 700,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 732,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 823,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 857,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 910,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 948,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 975,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 987,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 999,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 1011,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 1026,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [
      {
        "line": 16,
        "code": "# AAI Brain imports with fallbacks",
        "reason": "Unknown",
        "context": "from typing import Dict, List, Any, Optional, Set, Tuple\nfrom datetime import datetime, timedelta\nfrom dataclasses import dataclass\nfrom enum import Enum\n\n# AAI Brain imports with fallbacks\ntry:\n    from brain.core.module import BrainModule\n    from brain.core.confidence import AAIConfidenceScorer\n    BRAIN_AVAILABLE = True"
      },
      {
        "line": 148,
        "code": "logger.warning(\"Unified enhancement systems not available - using fallback mode\")",
        "reason": "Unknown",
        "context": "    async def _initialize_coordinator(self):\n        \"\"\"Initialize unified intelligence coordinator\"\"\"\n        \n        try:\n            if not UNIFIED_SYSTEMS_AVAILABLE:\n                logger.warning(\"Unified enhancement systems not available - using fallback mode\")\n                self.initialized = False\n                return\n            \n            # Initialize core enhancement systems"
      },
      {
        "line": 341,
        "code": "return await self._fallback_enhancement(command_type, prompt, \"Coordinator not initialized\")",
        "reason": "Unknown",
        "context": "        \"\"\"\n        start_time = datetime.now()\n        \n        try:\n            if not self.initialized:\n                return await self._fallback_enhancement(command_type, prompt, \"Coordinator not initialized\")\n            \n            # Create context for enhancement decision\n            context = {\n                \"command_type\": command_type,"
      },
      {
        "line": 803,
        "code": "async def _fallback_enhancement(self,",
        "reason": "Unknown",
        "context": "            \"confidence\": 0.70,\n            \"reasoning\": reasoning,\n            \"enhancement_decision\": \"No enhancement needed\"\n        }\n    \n    async def _fallback_enhancement(self,\n                                  command_type: str,\n                                  prompt: str,\n                                  error_reason: str) -> Dict[str, Any]:\n        \"\"\"Provide fallback enhancement when main system unavailable\"\"\""
      },
      {
        "line": 807,
        "code": "\"\"\"Provide fallback enhancement when main system unavailable\"\"\"",
        "reason": "Unknown",
        "context": "    \n    async def _fallback_enhancement(self,\n                                  command_type: str,\n                                  prompt: str,\n                                  error_reason: str) -> Dict[str, Any]:\n        \"\"\"Provide fallback enhancement when main system unavailable\"\"\"\n        \n        return {\n            \"success\": True,\n            \"enhanced\": False,"
      },
      {
        "line": 812,
        "code": "\"execution_mode\": \"fallback\",",
        "reason": "Unknown",
        "context": "        \"\"\"Provide fallback enhancement when main system unavailable\"\"\"\n        \n        return {\n            \"success\": True,\n            \"enhanced\": False,\n            \"execution_mode\": \"fallback\",\n            \"confidence\": 0.70,\n            \"reasoning\": f\"Enhancement system unavailable: {error_reason}\",\n            \"fallback\": True\n        }"
      },
      {
        "line": 815,
        "code": "\"fallback\": True",
        "reason": "Unknown",
        "context": "            \"success\": True,\n            \"enhanced\": False,\n            \"execution_mode\": \"fallback\",\n            \"confidence\": 0.70,\n            \"reasoning\": f\"Enhancement system unavailable: {error_reason}\",\n            \"fallback\": True\n        }\n    \n    async def _update_enhancement_performance(self,\n                                            enhancement_result: Dict[str, Any],"
      }
    ],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "typing",
      "logging",
      "dataclasses",
      "asyncio",
      "enum",
      "datetime"
    ],
    "circular_imports": []
  },
  "analyze_command_handler": {
    "module_path": "/mnt/c/Users/Brandon/AAI/brain/modules/analyze_command_handler.py",
    "prp_category": "BRAIN",
    "overall_status": "WARN",
    "import_success": true,
    "import_time": 0.029768705368041992,
    "import_error": null,
    "functional_tests": {
      "has_async_methods": true,
      "has_init_method": true
    },
    "performance_metrics": {
      "avg_import_time": 0.009416818618774414,
      "max_import_time": 0.010672569274902344,
      "file_size_kb": 10.193359375,
      "total_lines": 280,
      "code_lines": 212
    },
    "issues": [
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 12,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 51,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 57,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 201,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 247,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "Medium",
        "type": "fallback_patterns",
        "details": {
          "line": 14,
          "type": "Exception triggering fallback",
          "content": "except ImportError:     # Fallback"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [
      {
        "line": 15,
        "code": "# Fallback if analyze_orchestrator is not available",
        "reason": "Exception handling: except ImportError:",
        "context": "from typing import Dict, Any, List, Optional\nfrom pathlib import Path\ntry:\n    from analyze_orchestrator import AnalysisOrchestrator, AnalysisFocus, AnalysisDepth\nexcept ImportError:\n    # Fallback if analyze_orchestrator is not available\n    from brain.modules.analyze_orchestrator import AnalysisOrchestrator, AnalysisFocus, AnalysisDepth\n\nclass AnalyzeCommandHandler:\n    \"\"\"Handles the /analyze command execution with proper Claude tool integration\"\"\""
      }
    ],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "pathlib",
      "typing",
      "asyncio",
      "sys",
      "json"
    ],
    "circular_imports": []
  },
  "analyze_orchestrator": {
    "module_path": "/mnt/c/Users/Brandon/AAI/brain/modules/analyze_orchestrator.py",
    "prp_category": "BRAIN",
    "overall_status": "WARN",
    "import_success": true,
    "import_time": 0.013744592666625977,
    "import_error": null,
    "functional_tests": {
      "has_async_methods": true,
      "has_init_method": true
    },
    "performance_metrics": {
      "avg_import_time": 0.009589751561482748,
      "max_import_time": 0.010624885559082031,
      "file_size_kb": 28.7373046875,
      "total_lines": 713,
      "code_lines": 541
    },
    "issues": [
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 170,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 209,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 237,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 244,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 295,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 299,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 333,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 336,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 375,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 421,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 458,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 542,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def analyze_code_quality",
          "line": 231,
          "type": "Synchronous file I/O in async function"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def analyze_code_quality",
          "line": 231,
          "type": "Synchronous I/O operations"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def analyze_security",
          "line": 290,
          "type": "Synchronous file I/O in async function"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def analyze_security",
          "line": 290,
          "type": "Synchronous I/O operations"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def analyze_performance",
          "line": 328,
          "type": "Synchronous file I/O in async function"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def analyze_performance",
          "line": 328,
          "type": "Synchronous I/O operations"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      },
      {
        "severity": "High",
        "type": "Resource Leak",
        "details": "Unclosed file handle"
      }
    ],
    "fallback_triggers": [
      {
        "line": 474,
        "code": "# Fallback to local analysis",
        "reason": "Unknown",
        "context": "                # Execute real analysis based on focus area\n                if hasattr(self, 'claude_task_tool'):\n                    # Use Claude's Task tool for actual subagent spawning\n                    task.result = await self.execute_with_claude_task(task)\n                else:\n                    # Fallback to local analysis\n                    task.result = await self.execute_real_analysis(task)\n                task.status = \"completed\"\n                \n                self.rate_limiter.record_success()"
      },
      {
        "line": 579,
        "code": "# Fallback to simple analysis without subagents",
        "reason": "Unknown",
        "context": "        \n        # Set target path for analysis\n        self.target_path = target\n        \n        if not enable_subagents:\n            # Fallback to simple analysis without subagents\n            return await self.simple_analysis(target, focus)\n        \n        # Check for resumable tasks\n        tasks = None"
      },
      {
        "line": 683,
        "code": "\"\"\"Fallback simple analysis without subagents\"\"\"",
        "reason": "Unknown",
        "context": "            recommendations.append(\"Review architectural decisions for scalability improvements\")\n            \n        return recommendations\n    \n    async def simple_analysis(self, target: str, focus: AnalysisFocus) -> Dict[str, Any]:\n        \"\"\"Fallback simple analysis without subagents\"\"\"\n        return {\n            \"target\": target,\n            \"focus\": focus.value,\n            \"mode\": \"simple\","
      }
    ],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [
      "Unclosed file handle"
    ],
    "integration_issues": [],
    "dependencies": [
      "os",
      "typing",
      "pathlib",
      "time",
      "dataclasses",
      "asyncio",
      "enum",
      "json"
    ],
    "circular_imports": []
  },
  "anthropic-docs-integration": {
    "module_path": "/mnt/c/Users/Brandon/AAI/brain/modules/anthropic-docs-integration.py",
    "prp_category": "BRAIN",
    "overall_status": "WARN",
    "import_success": true,
    "import_time": 0.015169858932495117,
    "import_error": null,
    "functional_tests": {
      "has_async_methods": false,
      "has_init_method": true
    },
    "performance_metrics": {
      "avg_import_time": 0.009059588114420572,
      "max_import_time": 0.009516716003417969,
      "file_size_kb": 17.5185546875,
      "total_lines": 422,
      "code_lines": 342
    },
    "issues": [
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 44,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Resource Leak",
        "details": "Unclosed file handle"
      }
    ],
    "fallback_triggers": [],
    "async_issues": [],
    "resource_leaks": [
      "Unclosed file handle"
    ],
    "integration_issues": [],
    "dependencies": [
      "pathlib",
      "os",
      "typing",
      "json"
    ],
    "circular_imports": []
  },
  "dashboard-visualizer": {
    "module_path": "/mnt/c/Users/Brandon/AAI/brain/modules/dashboard-visualizer.py",
    "prp_category": "BRAIN",
    "overall_status": "FAIL",
    "import_success": false,
    "import_time": 0.013365507125854492,
    "import_error": "ModuleNotFoundError: No module named 'matplotlib'\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 995, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/brain/modules/dashboard-visualizer.py\", line 8, in <module>\n    import matplotlib.pyplot as plt\nModuleNotFoundError: No module named 'matplotlib'\n",
    "functional_tests": {},
    "performance_metrics": {},
    "issues": [
      {
        "severity": "Critical",
        "type": "Import Failure",
        "details": "ModuleNotFoundError: No module named 'matplotlib'\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 995, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/brain/modules/dashboard-visualizer.py\", line 8, in <module>\n    import matplotlib.pyplot as plt\nModuleNotFoundError: No module named 'matplotlib'\n"
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 59,
          "type": "Bare except clause",
          "content": "except:"
        }
      },
      {
        "severity": "Medium",
        "type": "Integration Issue",
        "details": "Missing comprehensive error handling for AAI integration"
      }
    ],
    "fallback_triggers": [],
    "async_issues": [],
    "resource_leaks": [],
    "integration_issues": [
      "Missing comprehensive error handling for AAI integration"
    ],
    "dependencies": [
      "os",
      "matplotlib.pyplot",
      "matplotlib.patches",
      "datetime",
      "numpy",
      "json"
    ],
    "circular_imports": []
  },
  "enhanced-repository-analyzer": {
    "module_path": "/mnt/c/Users/Brandon/AAI/brain/modules/enhanced-repository-analyzer.py",
    "prp_category": "BRAIN",
    "overall_status": "FAIL",
    "import_success": false,
    "import_time": 0.050383806228637695,
    "import_error": "ModuleNotFoundError: No module named 'core.pattern_registry'\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 995, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/brain/modules/enhanced-repository-analyzer.py\", line 23, in <module>\n    from core.pattern_registry import PatternRegistry\nModuleNotFoundError: No module named 'core.pattern_registry'\n",
    "functional_tests": {},
    "performance_metrics": {},
    "issues": [
      {
        "severity": "Critical",
        "type": "Import Failure",
        "details": "ModuleNotFoundError: No module named 'core.pattern_registry'\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 995, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/brain/modules/enhanced-repository-analyzer.py\", line 23, in <module>\n    from core.pattern_registry import PatternRegistry\nModuleNotFoundError: No module named 'core.pattern_registry'\n"
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 161,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 170,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 231,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 267,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 360,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 459,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 484,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 511,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 552,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 576,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def _generate_integration_recommendations",
          "line": 356,
          "type": "Synchronous file I/O in async function"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def _generate_integration_recommendations",
          "line": 356,
          "type": "Synchronous I/O operations"
        }
      },
      {
        "severity": "Medium",
        "type": "resource_management",
        "details": {
          "line": 91,
          "type": "Connection without context manager",
          "content": "connect(self.db_path)"
        }
      },
      {
        "severity": "Medium",
        "type": "resource_management",
        "details": {
          "line": 460,
          "type": "Connection without context manager",
          "content": "connect(self.db_path)"
        }
      },
      {
        "severity": "Medium",
        "type": "resource_management",
        "details": {
          "line": 485,
          "type": "Connection without context manager",
          "content": "connect(self.db_path)"
        }
      },
      {
        "severity": "Medium",
        "type": "resource_management",
        "details": {
          "line": 512,
          "type": "Connection without context manager",
          "content": "connect(self.db_path)"
        }
      },
      {
        "severity": "Medium",
        "type": "resource_management",
        "details": {
          "line": 577,
          "type": "Connection without context manager",
          "content": "connect(self.db_path)"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await outside async function"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [],
    "async_issues": [
      "Async function without await",
      "Await outside async function",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "core.semantic_analyzer",
      "sqlite3",
      "pathlib",
      "typing",
      "core.streaming_walker",
      "core.pattern_registry",
      "logging",
      "agents.structure_agent",
      "time",
      "brain.modules.unified_analytics",
      "dataclasses",
      "asyncio",
      "sys",
      "integrations.openrouter_integration",
      "datetime",
      "core.cache_manager",
      "brain.modules.integration_aware_prp_enhancer",
      "json"
    ],
    "circular_imports": []
  },
  "github-analyzer": {
    "module_path": "/mnt/c/Users/Brandon/AAI/brain/modules/github-analyzer.py",
    "prp_category": "BRAIN",
    "overall_status": "FAIL",
    "import_success": false,
    "import_time": 0.02751469612121582,
    "import_error": "ModuleNotFoundError: No module named 'docker'\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 995, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/brain/modules/github-analyzer.py\", line 25, in <module>\n    import docker\nModuleNotFoundError: No module named 'docker'\n",
    "functional_tests": {},
    "performance_metrics": {},
    "issues": [
      {
        "severity": "Critical",
        "type": "Import Failure",
        "details": "ModuleNotFoundError: No module named 'docker'\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 995, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/brain/modules/github-analyzer.py\", line 25, in <module>\n    import docker\nModuleNotFoundError: No module named 'docker'\n"
      },
      {
        "severity": "High",
        "type": "hardcoded_values",
        "details": {
          "line": 908,
          "type": "Hardcoded URL",
          "content": "\"https://github.com/octocat/Hello-World.git\""
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 134,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 172,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 195,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 244,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 256,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 346,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 360,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 474,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 578,
          "type": "Bare except clause",
          "content": "except:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 627,
          "type": "Bare except clause",
          "content": "except:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 669,
          "type": "Bare except clause",
          "content": "except:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 910,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Circular Import Risk",
        "details": "Potential circular import with git"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      },
      {
        "severity": "High",
        "type": "Resource Leak",
        "details": "Unclosed file handle"
      },
      {
        "severity": "High",
        "type": "Resource Leak",
        "details": "Unclosed connection"
      }
    ],
    "fallback_triggers": [],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [
      "Unclosed file handle",
      "Unclosed connection"
    ],
    "integration_issues": [],
    "dependencies": [
      "subprocess",
      "typing",
      "tree_sitter",
      "dataclasses",
      "docker",
      "shutil",
      "json",
      "os",
      "brain.modules.analyze_orchestrator",
      "requests",
      "logging",
      "brain.modules.research_prp_integration",
      "tempfile",
      "sqlite3",
      "pathlib",
      "brain.modules.unified_analytics",
      "hashlib",
      "asyncio",
      "bandit",
      "external_repo",
      "shlex",
      "time",
      "git",
      "ast",
      "datetime",
      "brain.modules.integration_aware_prp_enhancer"
    ],
    "circular_imports": [
      "Potential circular import with git"
    ]
  },
  "smart-tool-selector": {
    "module_path": "/mnt/c/Users/Brandon/AAI/brain/modules/smart-tool-selector.py",
    "prp_category": "BRAIN",
    "overall_status": "WARN",
    "import_success": true,
    "import_time": 0.036696434020996094,
    "import_error": null,
    "functional_tests": {
      "has_async_methods": true,
      "has_init_method": true
    },
    "performance_metrics": {
      "avg_import_time": 0.012940009435017904,
      "max_import_time": 0.013392925262451172,
      "file_size_kb": 19.59375,
      "total_lines": 487,
      "code_lines": 366
    },
    "issues": [
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 13,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 23,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 85,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 133,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 140,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 223,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 263,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 270,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 310,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 379,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [
      {
        "line": 12,
        "code": "# AAI Brain imports with fallbacks",
        "reason": "Unknown",
        "context": "import logging\nimport asyncio\nfrom typing import Dict, List, Any, Optional\nfrom datetime import datetime\n\n# AAI Brain imports with fallbacks\ntry:\n    from brain.core.module import BrainModule\n    from brain.core.confidence import AAIConfidenceScorer\n    BRAIN_AVAILABLE = True"
      },
      {
        "line": 22,
        "code": "# Tool selection imports with fallbacks",
        "reason": "Exception handling: except ImportError:",
        "context": "except ImportError:\n    BrainModule = object\n    AAIConfidenceScorer = None\n    BRAIN_AVAILABLE = False\n\n# Tool selection imports with fallbacks\ntry:\n    from agents.tool_selection.prompt_analyzer import PromptAnalyzer\n    from agents.tool_selection.fabric_integrator import FabricIntegrator  \n    from agents.tool_selection.tool_selector import ToolSelector"
      },
      {
        "line": 67,
        "code": "# Initialize components with fallbacks",
        "reason": "Unknown",
        "context": "                name=\"smart_tool_selector\",\n                description=\"Intelligent tool selection for AAI commands\",\n                version=\"1.0.0\"\n            )\n        \n        # Initialize components with fallbacks\n        self.prompt_analyzer = None\n        self.fabric_integrator = None\n        self.tool_selector = None\n        self.confidence_scorer = None"
      },
      {
        "line": 87,
        "code": "logger.warning(\"Tool selection components not available - using fallback mode\")",
        "reason": "Unknown",
        "context": "    async def _initialize_components(self):\n        \"\"\"Initialize tool selection components\"\"\"\n        \n        try:\n            if not TOOL_SELECTION_AVAILABLE:\n                logger.warning(\"Tool selection components not available - using fallback mode\")\n                self.initialized = False\n                return\n            \n            # Initialize core components"
      },
      {
        "line": 135,
        "code": "return await self._fallback_selection(prompt)",
        "reason": "Unknown",
        "context": "        Returns:\n            Selection result with tools, patterns, and confidence\n        \"\"\"\n        try:\n            if not self.initialized:\n                return await self._fallback_selection(prompt)\n            \n            # Convert context hint to enum if provided\n            context_enum = None\n            if context_hint and TOOL_SELECTION_AVAILABLE:"
      },
      {
        "line": 202,
        "code": "return await self._fallback_selection(prompt, error=str(e))",
        "reason": "Exception handling: except Exception as e:",
        "context": "            \n            return result\n            \n        except Exception as e:\n            logger.error(f\"Tool selection failed: {e}\")\n            return await self._fallback_selection(prompt, error=str(e))\n    \n    async def record_selection_outcome(self,\n                                     session_id: str,\n                                     execution_success: bool,"
      },
      {
        "line": 331,
        "code": "async def _fallback_selection(self, prompt: str, error: Optional[str] = None) -> Dict[str, Any]:",
        "reason": "Exception handling: except Exception as e:",
        "context": "            \n        except Exception as e:\n            logger.error(f\"Failed to analyze selection performance: {e}\")\n            return {\"analysis\": {}, \"error\": str(e)}\n    \n    async def _fallback_selection(self, prompt: str, error: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"Provide fallback tool selection when components are unavailable\"\"\"\n        \n        # Simple rule-based fallback\n        prompt_lower = prompt.lower()"
      },
      {
        "line": 332,
        "code": "\"\"\"Provide fallback tool selection when components are unavailable\"\"\"",
        "reason": "Exception handling: except Exception as e:",
        "context": "        except Exception as e:\n            logger.error(f\"Failed to analyze selection performance: {e}\")\n            return {\"analysis\": {}, \"error\": str(e)}\n    \n    async def _fallback_selection(self, prompt: str, error: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"Provide fallback tool selection when components are unavailable\"\"\"\n        \n        # Simple rule-based fallback\n        prompt_lower = prompt.lower()\n        "
      },
      {
        "line": 334,
        "code": "# Simple rule-based fallback",
        "reason": "Unknown",
        "context": "            return {\"analysis\": {}, \"error\": str(e)}\n    \n    async def _fallback_selection(self, prompt: str, error: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"Provide fallback tool selection when components are unavailable\"\"\"\n        \n        # Simple rule-based fallback\n        prompt_lower = prompt.lower()\n        \n        tools = []\n        patterns = []"
      },
      {
        "line": 366,
        "code": "\"warnings\": [\"Using fallback selection - limited functionality\"] + ([f\"Error: {error}\"] if error else []),",
        "reason": "Unknown",
        "context": "            \"selected_tools\": tools,\n            \"selected_patterns\": patterns,\n            \"execution_plan\": [\"Analyze prompt context\", \"Apply selected tools\", \"Generate response\"],\n            \"alternatives\": [],\n            \"recommendations\": [\"Consider providing more specific context for better tool selection\"],\n            \"warnings\": [\"Using fallback selection - limited functionality\"] + ([f\"Error: {error}\"] if error else []),\n            \"execution_ready\": True,\n            \"estimated_time\": 3,\n            \"session_id\": f\"fallback_{int(datetime.now().timestamp())}\",\n            \"processing_time_ms\": 10"
      },
      {
        "line": 369,
        "code": "\"session_id\": f\"fallback_{int(datetime.now().timestamp())}\",",
        "reason": "Error condition: \"warnings\": [\"Using fallback selection - limited functionality\"] + ([f\"Error: {error}\"] if error else []),",
        "context": "            \"alternatives\": [],\n            \"recommendations\": [\"Consider providing more specific context for better tool selection\"],\n            \"warnings\": [\"Using fallback selection - limited functionality\"] + ([f\"Error: {error}\"] if error else []),\n            \"execution_ready\": True,\n            \"estimated_time\": 3,\n            \"session_id\": f\"fallback_{int(datetime.now().timestamp())}\",\n            \"processing_time_ms\": 10\n        }\n    \n    # AAI Brain Module interface methods (if available)"
      },
      {
        "line": 432,
        "code": "\"ready\": self.initialized or True  # Always ready with fallback",
        "reason": "Unknown",
        "context": "            \"initialized\": self.initialized,\n            \"selection_count\": self.selection_count,\n            \"success_rate\": self.success_rate,\n            \"brain_integration\": BRAIN_AVAILABLE,\n            \"tool_selection_available\": TOOL_SELECTION_AVAILABLE,\n            \"ready\": self.initialized or True  # Always ready with fallback\n        }\n\n\n# Initialize module instance"
      }
    ],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "asyncio",
      "logging",
      "datetime",
      "typing"
    ],
    "circular_imports": []
  },
  "enhanced_command_processor": {
    "module_path": "/mnt/c/Users/Brandon/AAI/core/enhanced_command_processor.py",
    "prp_category": "CORE",
    "overall_status": "WARN",
    "import_success": true,
    "import_time": 0.015633583068847656,
    "import_error": null,
    "functional_tests": {
      "has_async_methods": true,
      "has_init_method": true
    },
    "performance_metrics": {
      "avg_import_time": 0.012201150258382162,
      "max_import_time": 0.013080835342407227,
      "file_size_kb": 40.7744140625,
      "total_lines": 1017,
      "code_lines": 778
    },
    "issues": [
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 17,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 29,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 207,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 244,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 389,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 482,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 496,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 522,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 568,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 586,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 604,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 619,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 646,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 675,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 707,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 743,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 777,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "Medium",
        "type": "fallback_patterns",
        "details": {
          "line": 577,
          "type": "Exception triggering fallback",
          "content": "except Exception as e:             return await self._fallback"
        }
      },
      {
        "severity": "Medium",
        "type": "fallback_patterns",
        "details": {
          "line": 595,
          "type": "Exception triggering fallback",
          "content": "except Exception as e:             return await self._fallback"
        }
      },
      {
        "severity": "Medium",
        "type": "fallback_patterns",
        "details": {
          "line": 613,
          "type": "Exception triggering fallback",
          "content": "except Exception as e:             return await self._fallback"
        }
      },
      {
        "severity": "Medium",
        "type": "fallback_patterns",
        "details": {
          "line": 640,
          "type": "Exception triggering fallback",
          "content": "except Exception as e:             return await self._fallback"
        }
      },
      {
        "severity": "Medium",
        "type": "fallback_patterns",
        "details": {
          "line": 669,
          "type": "Exception triggering fallback",
          "content": "except Exception as e:             return await self._fallback"
        }
      },
      {
        "severity": "Medium",
        "type": "fallback_patterns",
        "details": {
          "line": 701,
          "type": "Exception triggering fallback",
          "content": "except Exception as e:             return await self._fallback"
        }
      },
      {
        "severity": "Medium",
        "type": "fallback_patterns",
        "details": {
          "line": 737,
          "type": "Exception triggering fallback",
          "content": "except Exception as e:             return await self._fallback"
        }
      },
      {
        "severity": "Medium",
        "type": "fallback_patterns",
        "details": {
          "line": 769,
          "type": "Exception triggering fallback",
          "content": "except Exception as e:             return await self._fallback"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [
      {
        "line": 16,
        "code": "# Enhancement module imports with fallbacks",
        "reason": "Unknown",
        "context": "from typing import Dict, List, Any, Optional, Set, Tuple\nfrom datetime import datetime\nfrom dataclasses import dataclass\nfrom enum import Enum\n\n# Enhancement module imports with fallbacks\ntry:\n    from brain.modules.mem0_memory_enhancement import MemoryEnhancementModule\n    from brain.modules.mcp_orchestrator import MCPOrchestratorModule  \n    from brain.modules.tech_stack_expert import TechStackExpertModule"
      },
      {
        "line": 28,
        "code": "# AAI Brain imports with fallbacks",
        "reason": "Unknown",
        "context": "    MemoryEnhancementModule = None\n    MCPOrchestratorModule = None\n    TechStackExpertModule = None\n    ENHANCEMENT_MODULES_AVAILABLE = False\n\n# AAI Brain imports with fallbacks\ntry:\n    from brain.core.confidence import AAIConfidenceScorer\n    from brain.core.smart_module_loader import SmartModuleLoader\n    BRAIN_AVAILABLE = True"
      },
      {
        "line": 209,
        "code": "logger.warning(\"Enhancement modules not available - using fallback mode\")",
        "reason": "Unknown",
        "context": "    async def _initialize_components(self):\n        \"\"\"Initialize enhancement components\"\"\"\n        \n        try:\n            if not ENHANCEMENT_MODULES_AVAILABLE:\n                logger.warning(\"Enhancement modules not available - using fallback mode\")\n                self.initialized = False\n                return\n            \n            # Initialize core enhancement modules"
      },
      {
        "line": 566,
        "code": "return await self._fallback_enhancement(\"memory\", context)",
        "reason": "Unknown",
        "context": "    \n    async def _execute_memory_enhancement(self, context: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Execute memory enhancement layer\"\"\"\n        \n        if not self.memory_enhancer:\n            return await self._fallback_enhancement(\"memory\", context)\n        \n        try:\n            # Use memory enhancer to provide context and learning\n            result = await self.memory_enhancer.enhance_command(context)"
      },
      {
        "line": 578,
        "code": "return await self._fallback_enhancement(\"memory\", context, str(e))",
        "reason": "Exception handling: except Exception as e:",
        "context": "                \"enhancement_type\": \"memory\",\n                \"result\": result,\n                \"confidence\": result.get(\"confidence\", 0.80)\n            }\n        except Exception as e:\n            return await self._fallback_enhancement(\"memory\", context, str(e))\n    \n    async def _execute_orchestration_enhancement(self, context: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Execute orchestration enhancement layer\"\"\"\n        "
      },
      {
        "line": 584,
        "code": "return await self._fallback_enhancement(\"orchestration\", context)",
        "reason": "Unknown",
        "context": "    \n    async def _execute_orchestration_enhancement(self, context: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Execute orchestration enhancement layer\"\"\"\n        \n        if not self.orchestration_enhancer:\n            return await self._fallback_enhancement(\"orchestration\", context)\n        \n        try:\n            # Use orchestration enhancer for external service coordination\n            result = await self.orchestration_enhancer.enhance_command(context)"
      },
      {
        "line": 596,
        "code": "return await self._fallback_enhancement(\"orchestration\", context, str(e))",
        "reason": "Exception handling: except Exception as e:",
        "context": "                \"enhancement_type\": \"orchestration\",\n                \"result\": result,\n                \"confidence\": result.get(\"confidence\", 0.80)\n            }\n        except Exception as e:\n            return await self._fallback_enhancement(\"orchestration\", context, str(e))\n    \n    async def _execute_architecture_enhancement(self, context: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Execute architecture enhancement layer\"\"\"\n        "
      },
      {
        "line": 602,
        "code": "return await self._fallback_enhancement(\"architecture\", context)",
        "reason": "Unknown",
        "context": "    \n    async def _execute_architecture_enhancement(self, context: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Execute architecture enhancement layer\"\"\"\n        \n        if not self.architecture_enhancer:\n            return await self._fallback_enhancement(\"architecture\", context)\n        \n        try:\n            # Use architecture enhancer for tech stack guidance\n            result = await self.architecture_enhancer.provide_expertise(context)"
      },
      {
        "line": 614,
        "code": "return await self._fallback_enhancement(\"architecture\", context, str(e))",
        "reason": "Exception handling: except Exception as e:",
        "context": "                \"enhancement_type\": \"architecture\", \n                \"result\": result,\n                \"confidence\": result.get(\"confidence\", 0.80)\n            }\n        except Exception as e:\n            return await self._fallback_enhancement(\"architecture\", context, str(e))\n    \n    async def _execute_foundation_enhancement(self, context: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Execute foundation enhancement layer (baseline intelligence)\"\"\"\n        "
      },
      {
        "line": 641,
        "code": "return await self._fallback_enhancement(\"foundation\", context, str(e))",
        "reason": "Exception handling: except Exception as e:",
        "context": "                \"enhancement_type\": \"foundation\",\n                \"result\": foundation_analysis,\n                \"confidence\": 0.75\n            }\n        except Exception as e:\n            return await self._fallback_enhancement(\"foundation\", context, str(e))\n    \n    async def _execute_hybrid_rag_enhancement(self, context: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Execute hybrid RAG enhancement layer (vector + graph search)\"\"\"\n        "
      },
      {
        "line": 670,
        "code": "return await self._fallback_enhancement(\"hybrid_rag\", context, str(e))",
        "reason": "Exception handling: except Exception as e:",
        "context": "                \"enhancement_type\": \"hybrid_rag\",\n                \"result\": hybrid_rag_result,\n                \"confidence\": 0.82\n            }\n        except Exception as e:\n            return await self._fallback_enhancement(\"hybrid_rag\", context, str(e))\n    \n    async def _execute_research_enhancement(self, context: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Execute research enhancement layer (multi-source research)\"\"\"\n        "
      },
      {
        "line": 702,
        "code": "return await self._fallback_enhancement(\"research\", context, str(e))",
        "reason": "Exception handling: except Exception as e:",
        "context": "                \"enhancement_type\": \"research\",\n                \"result\": research_result,\n                \"confidence\": 0.88\n            }\n        except Exception as e:\n            return await self._fallback_enhancement(\"research\", context, str(e))\n    \n    async def _execute_reasoning_enhancement(self, context: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Execute reasoning enhancement layer (deep analysis with WHY)\"\"\"\n        "
      },
      {
        "line": 738,
        "code": "return await self._fallback_enhancement(\"reasoning\", context, str(e))",
        "reason": "Exception handling: except Exception as e:",
        "context": "                \"enhancement_type\": \"reasoning\",\n                \"result\": reasoning_result,\n                \"confidence\": 0.83\n            }\n        except Exception as e:\n            return await self._fallback_enhancement(\"reasoning\", context, str(e))\n    \n    async def _execute_tool_selection_enhancement(self, context: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Execute tool selection enhancement layer (intelligent tool selection)\"\"\"\n        "
      },
      {
        "line": 751,
        "code": "{\"tool\": \"secondary_tool\", \"confidence\": 0.75, \"rationale\": \"Good fallback option\"}",
        "reason": "Unknown",
        "context": "            prompt = context.get(\"prompt\", \"\")\n            \n            tool_selection_result = {\n                \"recommended_tools\": [\n                    {\"tool\": \"primary_tool\", \"confidence\": 0.90, \"rationale\": \"Best fit for command type\"},\n                    {\"tool\": \"secondary_tool\", \"confidence\": 0.75, \"rationale\": \"Good fallback option\"}\n                ],\n                \"tool_chain\": [\n                    \"Initialize primary tool\",\n                    \"Execute main operation\", "
      },
      {
        "line": 770,
        "code": "return await self._fallback_enhancement(\"tool_selection\", context, str(e))",
        "reason": "Exception handling: except Exception as e:",
        "context": "                \"enhancement_type\": \"tool_selection\",\n                \"result\": tool_selection_result,\n                \"confidence\": 0.85\n            }\n        except Exception as e:\n            return await self._fallback_enhancement(\"tool_selection\", context, str(e))\n    \n    async def _combine_enhancement_results(self,\n                                         enhancement_results: Dict[str, Any],\n                                         config: EnhancementConfiguration) -> Dict[str, Any]:"
      },
      {
        "line": 877,
        "code": "async def _fallback_enhancement(self,",
        "reason": "Unknown",
        "context": "        if len(successful_layers) >= 3:\n            recommendations.append(\"High confidence execution - multiple enhancement layers aligned\")\n        \n        return recommendations[:5]  # Limit to top 5 recommendations\n    \n    async def _fallback_enhancement(self,\n                                  layer_name: str,\n                                  context: Dict[str, Any],\n                                  error: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"Provide fallback enhancement when specific layer is unavailable\"\"\""
      },
      {
        "line": 881,
        "code": "\"\"\"Provide fallback enhancement when specific layer is unavailable\"\"\"",
        "reason": "Unknown",
        "context": "    \n    async def _fallback_enhancement(self,\n                                  layer_name: str,\n                                  context: Dict[str, Any],\n                                  error: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"Provide fallback enhancement when specific layer is unavailable\"\"\"\n        \n        return {\n            \"success\": True,  # Fallback still provides value\n            \"enhancement_type\": f\"{layer_name}_fallback\","
      },
      {
        "line": 884,
        "code": "\"success\": True,  # Fallback still provides value",
        "reason": "Unknown",
        "context": "                                  context: Dict[str, Any],\n                                  error: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"Provide fallback enhancement when specific layer is unavailable\"\"\"\n        \n        return {\n            \"success\": True,  # Fallback still provides value\n            \"enhancement_type\": f\"{layer_name}_fallback\",\n            \"result\": {\n                \"fallback_analysis\": f\"Baseline {layer_name} enhancement applied\",\n                \"confidence\": 0.70,"
      },
      {
        "line": 885,
        "code": "\"enhancement_type\": f\"{layer_name}_fallback\",",
        "reason": "Unknown",
        "context": "                                  error: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"Provide fallback enhancement when specific layer is unavailable\"\"\"\n        \n        return {\n            \"success\": True,  # Fallback still provides value\n            \"enhancement_type\": f\"{layer_name}_fallback\",\n            \"result\": {\n                \"fallback_analysis\": f\"Baseline {layer_name} enhancement applied\",\n                \"confidence\": 0.70,\n                \"note\": f\"{layer_name} enhancement module unavailable\" + (f\": {error}\" if error else \"\")"
      },
      {
        "line": 887,
        "code": "\"fallback_analysis\": f\"Baseline {layer_name} enhancement applied\",",
        "reason": "Unknown",
        "context": "        \n        return {\n            \"success\": True,  # Fallback still provides value\n            \"enhancement_type\": f\"{layer_name}_fallback\",\n            \"result\": {\n                \"fallback_analysis\": f\"Baseline {layer_name} enhancement applied\",\n                \"confidence\": 0.70,\n                \"note\": f\"{layer_name} enhancement module unavailable\" + (f\": {error}\" if error else \"\")\n            },\n            \"confidence\": 0.70,"
      },
      {
        "line": 892,
        "code": "\"fallback\": True",
        "reason": "Error condition: \"note\": f\"{layer_name} enhancement module unavailable\" + (f\": {error}\" if error else \"\")",
        "context": "                \"fallback_analysis\": f\"Baseline {layer_name} enhancement applied\",\n                \"confidence\": 0.70,\n                \"note\": f\"{layer_name} enhancement module unavailable\" + (f\": {error}\" if error else \"\")\n            },\n            \"confidence\": 0.70,\n            \"fallback\": True\n        }\n    \n    async def get_enhancement_status(self) -> Dict[str, Any]:\n        \"\"\"Get enhanced command processor status\"\"\""
      }
    ],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "typing",
      "logging",
      "dataclasses",
      "asyncio",
      "enum",
      "datetime"
    ],
    "circular_imports": []
  },
  "unified_enhancement_coordinator": {
    "module_path": "/mnt/c/Users/Brandon/AAI/core/unified_enhancement_coordinator.py",
    "prp_category": "CORE",
    "overall_status": "WARN",
    "import_success": true,
    "import_time": 0.014901161193847656,
    "import_error": null,
    "functional_tests": {
      "has_async_methods": true,
      "has_init_method": true
    },
    "performance_metrics": {
      "avg_import_time": 0.013876756032307943,
      "max_import_time": 0.015190839767456055,
      "file_size_kb": 53.73046875,
      "total_lines": 1333,
      "code_lines": 1019
    },
    "issues": [
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 19,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 30,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 193,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 232,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 311,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 352,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 535,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 572,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 709,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 749,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 783,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 805,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 827,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 898,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 1161,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [
      {
        "line": 195,
        "code": "logger.warning(\"Core components not available - using fallback mode\")",
        "reason": "Unknown",
        "context": "    async def _initialize_components(self):\n        \"\"\"Initialize coordinator components\"\"\"\n        \n        try:\n            if not CORE_COMPONENTS_AVAILABLE:\n                logger.warning(\"Core components not available - using fallback mode\")\n                self.initialized = False\n                return\n            \n            # Initialize core components"
      },
      {
        "line": 235,
        "code": "return await self._fallback_coordination(context, \"Coordinator not initialized\")",
        "reason": "Unknown",
        "context": "        start_time = datetime.now()\n        \n        try:\n            # Check initialization\n            if not self.initialized:\n                return await self._fallback_coordination(context, \"Coordinator not initialized\")\n            \n            # Check concurrent coordination limit\n            if len(self.active_coordinations) >= self.max_concurrent_coordinations:\n                return await self._queue_coordination(context)"
      },
      {
        "line": 303,
        "code": "recommendations=[\"Retry coordination with fallback mode\"],",
        "reason": "Unknown",
        "context": "                total_execution_time=execution_time,\n                combined_confidence=0.70,\n                layer_executions={},\n                coordination_insights={\"error\": str(e)},\n                resource_usage={},\n                recommendations=[\"Retry coordination with fallback mode\"],\n                reasoning=f\"Coordination failed: {str(e)}\"\n            )\n    \n    async def _determine_enhancement_layers(self, "
      },
      {
        "line": 313,
        "code": "# Fallback layer determination",
        "reason": "Unknown",
        "context": "                                          context: CoordinationContext) -> Dict[str, Any]:\n        \"\"\"Determine which enhancement layers are needed\"\"\"\n        \n        try:\n            if not self.enhancement_loader:\n                # Fallback layer determination\n                return {\n                    \"layers\": [\"memory\", \"foundation\"],\n                    \"confidence\": 0.70,\n                    \"reasoning\": \"Fallback to basic layers\""
      },
      {
        "line": 317,
        "code": "\"reasoning\": \"Fallback to basic layers\"",
        "reason": "Unknown",
        "context": "            if not self.enhancement_loader:\n                # Fallback layer determination\n                return {\n                    \"layers\": [\"memory\", \"foundation\"],\n                    \"confidence\": 0.70,\n                    \"reasoning\": \"Fallback to basic layers\"\n                }\n            \n            # Use enhancement loader to evaluate triggers\n            loader_context = {"
      },
      {
        "line": 768,
        "code": "# Fallback execution for layers without specific modules",
        "reason": "Unknown",
        "context": "            elif layer_name == \"orchestration\" and self.orchestration_enhancer:\n                return await self._execute_orchestration_layer(layer_context)\n            elif layer_name == \"architecture\" and self.architecture_enhancer:\n                return await self._execute_architecture_layer(layer_context)\n            else:\n                # Fallback execution for layers without specific modules\n                return await self._execute_fallback_layer(layer_name, layer_context)\n                \n        except Exception as e:\n            logger.error(f\"Layer {layer_name} execution failed: {e}\")"
      },
      {
        "line": 769,
        "code": "return await self._execute_fallback_layer(layer_name, layer_context)",
        "reason": "Unknown",
        "context": "                return await self._execute_orchestration_layer(layer_context)\n            elif layer_name == \"architecture\" and self.architecture_enhancer:\n                return await self._execute_architecture_layer(layer_context)\n            else:\n                # Fallback execution for layers without specific modules\n                return await self._execute_fallback_layer(layer_name, layer_context)\n                \n        except Exception as e:\n            logger.error(f\"Layer {layer_name} execution failed: {e}\")\n            return {"
      },
      {
        "line": 793,
        "code": "return await self._execute_fallback_layer(\"memory\", context)",
        "reason": "Unknown",
        "context": "                    \"layer_name\": \"memory\",\n                    \"result\": result,\n                    \"confidence\": result.get(\"confidence\", 0.80)\n                }\n            else:\n                return await self._execute_fallback_layer(\"memory\", context)\n        except Exception as e:\n            return {\n                \"success\": False,\n                \"error\": str(e),"
      },
      {
        "line": 815,
        "code": "return await self._execute_fallback_layer(\"orchestration\", context)",
        "reason": "Unknown",
        "context": "                    \"layer_name\": \"orchestration\",\n                    \"result\": result,\n                    \"confidence\": result.get(\"confidence\", 0.80)\n                }\n            else:\n                return await self._execute_fallback_layer(\"orchestration\", context)\n        except Exception as e:\n            return {\n                \"success\": False,\n                \"error\": str(e),"
      },
      {
        "line": 837,
        "code": "return await self._execute_fallback_layer(\"architecture\", context)",
        "reason": "Unknown",
        "context": "                    \"layer_name\": \"architecture\",\n                    \"result\": result,\n                    \"confidence\": result.get(\"confidence\", 0.80)\n                }\n            else:\n                return await self._execute_fallback_layer(\"architecture\", context)\n        except Exception as e:\n            return {\n                \"success\": False,\n                \"error\": str(e),"
      },
      {
        "line": 846,
        "code": "async def _execute_fallback_layer(self,",
        "reason": "Unknown",
        "context": "                \"error\": str(e),\n                \"confidence\": 0.70,\n                \"layer_name\": \"architecture\"\n            }\n    \n    async def _execute_fallback_layer(self, \n                                    layer_name: str,\n                                    context: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Execute fallback for layers without specific modules\"\"\"\n        "
      },
      {
        "line": 849,
        "code": "\"\"\"Execute fallback for layers without specific modules\"\"\"",
        "reason": "Unknown",
        "context": "            }\n    \n    async def _execute_fallback_layer(self, \n                                    layer_name: str,\n                                    context: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Execute fallback for layers without specific modules\"\"\"\n        \n        fallback_results = {\n            \"foundation\": {\n                \"analysis\": f\"Foundation analysis for {context.get('command_type', 'unknown')}\","
      },
      {
        "line": 851,
        "code": "fallback_results = {",
        "reason": "Unknown",
        "context": "    async def _execute_fallback_layer(self, \n                                    layer_name: str,\n                                    context: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Execute fallback for layers without specific modules\"\"\"\n        \n        fallback_results = {\n            \"foundation\": {\n                \"analysis\": f\"Foundation analysis for {context.get('command_type', 'unknown')}\",\n                \"quality_baseline\": 0.75,\n                \"recommendations\": [\"Follow established patterns\", \"Maintain modularity\"]"
      },
      {
        "line": 879,
        "code": "result = fallback_results.get(layer_name, {",
        "reason": "Unknown",
        "context": "                \"selection_rationale\": \"Optimized for efficiency and reliability\",\n                \"confidence\": 0.85\n            }\n        }\n        \n        result = fallback_results.get(layer_name, {\n            \"fallback_analysis\": f\"Basic {layer_name} enhancement applied\",\n            \"confidence\": 0.70\n        })\n        "
      },
      {
        "line": 880,
        "code": "\"fallback_analysis\": f\"Basic {layer_name} enhancement applied\",",
        "reason": "Unknown",
        "context": "                \"confidence\": 0.85\n            }\n        }\n        \n        result = fallback_results.get(layer_name, {\n            \"fallback_analysis\": f\"Basic {layer_name} enhancement applied\",\n            \"confidence\": 0.70\n        })\n        \n        return {"
      },
      {
        "line": 889,
        "code": "\"fallback\": True",
        "reason": "Unknown",
        "context": "        return {\n            \"success\": True,\n            \"layer_name\": layer_name,\n            \"result\": result,\n            \"confidence\": result.get(\"confidence\", 0.70),\n            \"fallback\": True\n        }\n    \n    async def _synthesize_coordination_results(self,\n                                             context: CoordinationContext,"
      },
      {
        "line": 967,
        "code": "recommendations=[\"Retry with fallback mode\"],",
        "reason": "Unknown",
        "context": "                total_execution_time=(datetime.now() - start_time).total_seconds(),\n                combined_confidence=0.70,\n                layer_executions=layer_executions,\n                coordination_insights={\"error\": str(e)},\n                resource_usage={},\n                recommendations=[\"Retry with fallback mode\"],\n                reasoning=f\"Coordination synthesis failed: {str(e)}\"\n            )\n    \n    def _generate_coordination_insights(self,"
      },
      {
        "line": 1054,
        "code": "recommendations.append(\"Many enhancements failed - consider retry or fallback\")",
        "reason": "Unknown",
        "context": "        elif successful_count >= total_count * 0.8:\n            recommendations.append(\"Most enhancements successful - high quality result expected\")\n        elif successful_count >= total_count * 0.5:\n            recommendations.append(\"Some enhancements failed - validate results carefully\")\n        else:\n            recommendations.append(\"Many enhancements failed - consider retry or fallback\")\n        \n        # Add mode-specific recommendations\n        if context.mode == CoordinationMode.SEQUENTIAL:\n            recommendations.append(\"Consider parallel execution for better performance\")"
      },
      {
        "line": 1081,
        "code": "reasoning += \"Limited coordination success - fallback to baseline execution recommended.\"",
        "reason": "Unknown",
        "context": "        if success_rate >= 0.8:\n            reasoning += \"High coordination success enables confident enhanced execution.\"\n        elif success_rate >= 0.5:\n            reasoning += \"Moderate coordination success with some enhancement benefits.\"\n        else:\n            reasoning += \"Limited coordination success - fallback to baseline execution recommended.\"\n        \n        return reasoning\n    \n    async def _fallback_coordination(self,"
      },
      {
        "line": 1085,
        "code": "async def _fallback_coordination(self,",
        "reason": "Unknown",
        "context": "        else:\n            reasoning += \"Limited coordination success - fallback to baseline execution recommended.\"\n        \n        return reasoning\n    \n    async def _fallback_coordination(self,\n                                   context: CoordinationContext,\n                                   error: str) -> CoordinationResult:\n        \"\"\"Provide fallback coordination when main system fails\"\"\"\n        "
      },
      {
        "line": 1088,
        "code": "\"\"\"Provide fallback coordination when main system fails\"\"\"",
        "reason": "Unknown",
        "context": "        return reasoning\n    \n    async def _fallback_coordination(self,\n                                   context: CoordinationContext,\n                                   error: str) -> CoordinationResult:\n        \"\"\"Provide fallback coordination when main system fails\"\"\"\n        \n        fallback_layers = [\"memory\", \"foundation\"]\n        fallback_executions = {}\n        "
      },
      {
        "line": 1090,
        "code": "fallback_layers = [\"memory\", \"foundation\"]",
        "reason": "Unknown",
        "context": "    async def _fallback_coordination(self,\n                                   context: CoordinationContext,\n                                   error: str) -> CoordinationResult:\n        \"\"\"Provide fallback coordination when main system fails\"\"\"\n        \n        fallback_layers = [\"memory\", \"foundation\"]\n        fallback_executions = {}\n        \n        for layer in fallback_layers:\n            fallback_executions[layer] = LayerExecution("
      },
      {
        "line": 1091,
        "code": "fallback_executions = {}",
        "reason": "Unknown",
        "context": "                                   context: CoordinationContext,\n                                   error: str) -> CoordinationResult:\n        \"\"\"Provide fallback coordination when main system fails\"\"\"\n        \n        fallback_layers = [\"memory\", \"foundation\"]\n        fallback_executions = {}\n        \n        for layer in fallback_layers:\n            fallback_executions[layer] = LayerExecution(\n                layer_name=layer,"
      },
      {
        "line": 1093,
        "code": "for layer in fallback_layers:",
        "reason": "Unknown",
        "context": "        \"\"\"Provide fallback coordination when main system fails\"\"\"\n        \n        fallback_layers = [\"memory\", \"foundation\"]\n        fallback_executions = {}\n        \n        for layer in fallback_layers:\n            fallback_executions[layer] = LayerExecution(\n                layer_name=layer,\n                status=\"completed\",\n                confidence=0.70,"
      },
      {
        "line": 1094,
        "code": "fallback_executions[layer] = LayerExecution(",
        "reason": "Unknown",
        "context": "        \n        fallback_layers = [\"memory\", \"foundation\"]\n        fallback_executions = {}\n        \n        for layer in fallback_layers:\n            fallback_executions[layer] = LayerExecution(\n                layer_name=layer,\n                status=\"completed\",\n                confidence=0.70,\n                result={\"fallback\": True, \"basic_enhancement\": f\"{layer} baseline applied\"}"
      },
      {
        "line": 1098,
        "code": "result={\"fallback\": True, \"basic_enhancement\": f\"{layer} baseline applied\"}",
        "reason": "Unknown",
        "context": "        for layer in fallback_layers:\n            fallback_executions[layer] = LayerExecution(\n                layer_name=layer,\n                status=\"completed\",\n                confidence=0.70,\n                result={\"fallback\": True, \"basic_enhancement\": f\"{layer} baseline applied\"}\n            )\n        \n        return CoordinationResult(\n            session_id=context.session_id,"
      },
      {
        "line": 1105,
        "code": "total_layers=len(fallback_layers),",
        "reason": "Unknown",
        "context": "        \n        return CoordinationResult(\n            session_id=context.session_id,\n            success=True,\n            mode=CoordinationMode.SEQUENTIAL,\n            total_layers=len(fallback_layers),\n            successful_layers=len(fallback_layers),\n            failed_layers=0,\n            total_execution_time=0.5,\n            combined_confidence=0.70,"
      },
      {
        "line": 1106,
        "code": "successful_layers=len(fallback_layers),",
        "reason": "Unknown",
        "context": "        return CoordinationResult(\n            session_id=context.session_id,\n            success=True,\n            mode=CoordinationMode.SEQUENTIAL,\n            total_layers=len(fallback_layers),\n            successful_layers=len(fallback_layers),\n            failed_layers=0,\n            total_execution_time=0.5,\n            combined_confidence=0.70,\n            layer_executions=fallback_executions,"
      },
      {
        "line": 1110,
        "code": "layer_executions=fallback_executions,",
        "reason": "Unknown",
        "context": "            total_layers=len(fallback_layers),\n            successful_layers=len(fallback_layers),\n            failed_layers=0,\n            total_execution_time=0.5,\n            combined_confidence=0.70,\n            layer_executions=fallback_executions,\n            coordination_insights={\"fallback_mode\": True, \"error\": error},\n            resource_usage={\"minimal\": True},\n            recommendations=[\"System available with basic enhancements\"],\n            reasoning=f\"Fallback coordination applied due to: {error}\""
      },
      {
        "line": 1111,
        "code": "coordination_insights={\"fallback_mode\": True, \"error\": error},",
        "reason": "Unknown",
        "context": "            successful_layers=len(fallback_layers),\n            failed_layers=0,\n            total_execution_time=0.5,\n            combined_confidence=0.70,\n            layer_executions=fallback_executions,\n            coordination_insights={\"fallback_mode\": True, \"error\": error},\n            resource_usage={\"minimal\": True},\n            recommendations=[\"System available with basic enhancements\"],\n            reasoning=f\"Fallback coordination applied due to: {error}\"\n        )"
      },
      {
        "line": 1114,
        "code": "reasoning=f\"Fallback coordination applied due to: {error}\"",
        "reason": "Unknown",
        "context": "            combined_confidence=0.70,\n            layer_executions=fallback_executions,\n            coordination_insights={\"fallback_mode\": True, \"error\": error},\n            resource_usage={\"minimal\": True},\n            recommendations=[\"System available with basic enhancements\"],\n            reasoning=f\"Fallback coordination applied due to: {error}\"\n        )\n    \n    async def _minimal_coordination(self,\n                                  context: CoordinationContext,"
      }
    ],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "typing",
      "logging",
      "dataclasses",
      "asyncio",
      "enum",
      "collections",
      "datetime",
      "json"
    ],
    "circular_imports": []
  },
  "resource_optimization_manager": {
    "module_path": "/mnt/c/Users/Brandon/AAI/core/resource_optimization_manager.py",
    "prp_category": "CORE",
    "overall_status": "WARN",
    "import_success": true,
    "import_time": 0.014098167419433594,
    "import_error": null,
    "functional_tests": {
      "has_async_methods": true,
      "has_init_method": true
    },
    "performance_metrics": {
      "avg_import_time": 0.011987129847208658,
      "max_import_time": 0.014556407928466797,
      "file_size_kb": 41.4130859375,
      "total_lines": 1109,
      "code_lines": 799
    },
    "issues": [
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 65,
          "type": "Try without except",
          "content": "class CacheEntry:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 154,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 220,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 254,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 310,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 355,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 398,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 429,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 463,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 526,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 572,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 620,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 670,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 742,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 881,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 952,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 956,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "typing",
      "logging",
      "dataclasses",
      "hashlib",
      "asyncio",
      "enum",
      "collections",
      "weakref",
      "datetime",
      "json"
    ],
    "circular_imports": []
  },
  "agent_interoperability_framework": {
    "module_path": "/mnt/c/Users/Brandon/AAI/core/agent_interoperability_framework.py",
    "prp_category": "CORE",
    "overall_status": "WARN",
    "import_success": true,
    "import_time": 0.017525434494018555,
    "import_error": null,
    "functional_tests": {
      "has_agent_class": true,
      "has_async_methods": true,
      "has_init_method": true
    },
    "performance_metrics": {
      "avg_import_time": 0.011945883433024088,
      "max_import_time": 0.013656377792358398,
      "file_size_kb": 44.3056640625,
      "total_lines": 1163,
      "code_lines": 864
    },
    "issues": [
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 181,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 212,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 252,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 290,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 325,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 375,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 423,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 452,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 477,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 510,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 576,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 623,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 662,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 702,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 729,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 756,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 790,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 806,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 845,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 874,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 916,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 959,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 963,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 970,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "uuid",
      "typing",
      "logging",
      "dataclasses",
      "asyncio",
      "enum",
      "collections",
      "weakref",
      "datetime",
      "json"
    ],
    "circular_imports": []
  },
  "realtime_orchestration_monitor": {
    "module_path": "/mnt/c/Users/Brandon/AAI/core/realtime_orchestration_monitor.py",
    "prp_category": "CORE",
    "overall_status": "WARN",
    "import_success": true,
    "import_time": 0.019725322723388672,
    "import_error": null,
    "functional_tests": {
      "has_async_methods": true,
      "has_init_method": true
    },
    "performance_metrics": {
      "avg_import_time": 0.010527849197387695,
      "max_import_time": 0.010947704315185547,
      "file_size_kb": 51.376953125,
      "total_lines": 1286,
      "code_lines": 935
    },
    "issues": [
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 22,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 191,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 335,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 387,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 475,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 530,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 574,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 628,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 671,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 712,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 744,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 767,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 801,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 837,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 852,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 883,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 935,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 952,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 963,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 984,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 995,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 998,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 1009,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 1011,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 1030,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 1045,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 1119,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 1128,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Circular Import Risk",
        "details": "Potential circular import with time"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "typing",
      "statistics",
      "logging",
      "time",
      "dataclasses",
      "asyncio",
      "enum",
      "collections",
      "weakref",
      "datetime",
      "json"
    ],
    "circular_imports": [
      "Potential circular import with time"
    ]
  },
  "server_manager": {
    "module_path": "/mnt/c/Users/Brandon/AAI/mcp/server_manager.py",
    "prp_category": "MCP",
    "overall_status": "WARN",
    "import_success": true,
    "import_time": 0.014206886291503906,
    "import_error": null,
    "functional_tests": {
      "has_async_methods": true,
      "has_init_method": true
    },
    "performance_metrics": {
      "avg_import_time": 0.00906523068745931,
      "max_import_time": 0.01124715805053711,
      "file_size_kb": 21.2099609375,
      "total_lines": 566,
      "code_lines": 413
    },
    "issues": [
      {
        "severity": "High",
        "type": "hardcoded_values",
        "details": {
          "line": 423,
          "type": "Hardcoded URL",
          "content": "\"http://example.com\""
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 15,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 26,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 180,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 215,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 221,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 240,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 292,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 306,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 339,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 390,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 399,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [
      {
        "line": 14,
        "code": "# MCP imports with fallbacks",
        "reason": "Unknown",
        "context": "from contextlib import AsyncExitStack\nfrom typing import Dict, List, Any, Optional, Set\nfrom datetime import datetime, timedelta\nfrom pathlib import Path\n\n# MCP imports with fallbacks\ntry:\n    import mcp\n    from mcp.client.session import ClientSession\n    from mcp.client.stdio import stdio_client"
      },
      {
        "line": 153,
        "code": "# Web Search MCP Server (using Brave as fallback)",
        "reason": "Unknown",
        "context": "            command=[\"npx\", \"@modelcontextprotocol/server-filesystem\"],\n            description=\"File system operations and management\",\n            capabilities=[\"read_file\", \"write_file\", \"list_directory\", \"create_directory\"]\n        ))\n        \n        # Web Search MCP Server (using Brave as fallback)\n        self.server_configs.append(MCPServerConfig(\n            name=\"search\",\n            command=[\"npx\", \"@modelcontextprotocol/server-brave-search\"],\n            description=\"Web search and information retrieval\","
      },
      {
        "line": 192,
        "code": "logger.warning(\"MCP not available - using fallback mode\")",
        "reason": "Unknown",
        "context": "            \n            # Initialize servers if MCP is available\n            if MCP_AVAILABLE:\n                await self._initialize_mcp_servers()\n            else:\n                logger.warning(\"MCP not available - using fallback mode\")\n                await self._initialize_fallback_servers()\n            \n            # Start health monitoring\n            await self._start_health_monitoring()"
      },
      {
        "line": 193,
        "code": "await self._initialize_fallback_servers()",
        "reason": "Unknown",
        "context": "            # Initialize servers if MCP is available\n            if MCP_AVAILABLE:\n                await self._initialize_mcp_servers()\n            else:\n                logger.warning(\"MCP not available - using fallback mode\")\n                await self._initialize_fallback_servers()\n            \n            # Start health monitoring\n            await self._start_health_monitoring()\n            "
      },
      {
        "line": 268,
        "code": "# Create fallback instance",
        "reason": "Exception handling: except Exception as e:",
        "context": "                logger.info(f\"MCP server {config.name} started successfully\")\n                \n            except Exception as e:\n                logger.error(f\"Failed to start MCP server {config.name}: {e}\")\n                \n                # Create fallback instance\n                server_instance = MCPServerInstance(config)\n                server_instance.status = \"failed\"\n                server_instance.last_error = str(e)\n                "
      },
      {
        "line": 275,
        "code": "async def _initialize_fallback_servers(self):",
        "reason": "Unknown",
        "context": "                server_instance.status = \"failed\"\n                server_instance.last_error = str(e)\n                \n                self.servers[config.name] = server_instance\n    \n    async def _initialize_fallback_servers(self):\n        \"\"\"Initialize fallback server instances when MCP is not available\"\"\"\n        \n        for config in self.server_configs:\n            server_instance = MCPServerInstance(config)"
      },
      {
        "line": 276,
        "code": "\"\"\"Initialize fallback server instances when MCP is not available\"\"\"",
        "reason": "Unknown",
        "context": "                server_instance.last_error = str(e)\n                \n                self.servers[config.name] = server_instance\n    \n    async def _initialize_fallback_servers(self):\n        \"\"\"Initialize fallback server instances when MCP is not available\"\"\"\n        \n        for config in self.server_configs:\n            server_instance = MCPServerInstance(config)\n            server_instance.status = \"fallback\""
      },
      {
        "line": 280,
        "code": "server_instance.status = \"fallback\"",
        "reason": "Unknown",
        "context": "    async def _initialize_fallback_servers(self):\n        \"\"\"Initialize fallback server instances when MCP is not available\"\"\"\n        \n        for config in self.server_configs:\n            server_instance = MCPServerInstance(config)\n            server_instance.status = \"fallback\"\n            server_instance.startup_time = datetime.now()\n            \n            self.servers[config.name] = server_instance\n            "
      },
      {
        "line": 285,
        "code": "logger.info(f\"Fallback server {config.name} initialized\")",
        "reason": "Unknown",
        "context": "            server_instance.status = \"fallback\"\n            server_instance.startup_time = datetime.now()\n            \n            self.servers[config.name] = server_instance\n            \n            logger.info(f\"Fallback server {config.name} initialized\")\n    \n    async def _start_health_monitoring(self):\n        \"\"\"Start background health monitoring task\"\"\"\n        "
      },
      {
        "line": 364,
        "code": "# Fallback execution",
        "reason": "Unknown",
        "context": "                    \"server\": server_name,\n                    \"execution_time\": datetime.now().isoformat()\n                }\n            \n            else:\n                # Fallback execution\n                result = await self._execute_fallback_task(server_name, tool_name, arguments)\n                server.record_request(False)\n                \n                return result"
      },
      {
        "line": 365,
        "code": "result = await self._execute_fallback_task(server_name, tool_name, arguments)",
        "reason": "Unknown",
        "context": "                    \"execution_time\": datetime.now().isoformat()\n                }\n            \n            else:\n                # Fallback execution\n                result = await self._execute_fallback_task(server_name, tool_name, arguments)\n                server.record_request(False)\n                \n                return result\n            "
      },
      {
        "line": 380,
        "code": "\"fallback_attempted\": True",
        "reason": "Unknown",
        "context": "            \n            return {\n                \"success\": False,\n                \"error\": str(e),\n                \"server\": server_name,\n                \"fallback_attempted\": True\n            }\n        \n        finally:\n            self.total_delegations += 1"
      },
      {
        "line": 410,
        "code": "async def _execute_fallback_task(self,",
        "reason": "Exception handling: except Exception as e:",
        "context": "                    server.status = \"failed\"\n            \n        except Exception as e:\n            logger.error(f\"Server recovery attempt failed for {server_name}: {e}\")\n    \n    async def _execute_fallback_task(self, \n                                   server_name: str,\n                                   tool_name: str,\n                                   arguments: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Execute task using fallback methods when MCP server is unavailable\"\"\""
      },
      {
        "line": 414,
        "code": "\"\"\"Execute task using fallback methods when MCP server is unavailable\"\"\"",
        "reason": "Unknown",
        "context": "    \n    async def _execute_fallback_task(self, \n                                   server_name: str,\n                                   tool_name: str,\n                                   arguments: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Execute task using fallback methods when MCP server is unavailable\"\"\"\n        \n        logger.info(f\"Executing fallback task: {tool_name} on {server_name}\")\n        \n        # Basic fallback implementations"
      },
      {
        "line": 416,
        "code": "logger.info(f\"Executing fallback task: {tool_name} on {server_name}\")",
        "reason": "Unknown",
        "context": "                                   server_name: str,\n                                   tool_name: str,\n                                   arguments: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Execute task using fallback methods when MCP server is unavailable\"\"\"\n        \n        logger.info(f\"Executing fallback task: {tool_name} on {server_name}\")\n        \n        # Basic fallback implementations\n        fallback_results = {\n            \"slack\": {\"message\": \"Slack message would be sent here\", \"channel\": \"general\"},"
      },
      {
        "line": 418,
        "code": "# Basic fallback implementations",
        "reason": "Unknown",
        "context": "                                   arguments: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Execute task using fallback methods when MCP server is unavailable\"\"\"\n        \n        logger.info(f\"Executing fallback task: {tool_name} on {server_name}\")\n        \n        # Basic fallback implementations\n        fallback_results = {\n            \"slack\": {\"message\": \"Slack message would be sent here\", \"channel\": \"general\"},\n            \"github\": {\"issue_number\": 12345, \"status\": \"created\"},\n            \"filesystem\": {\"operation\": \"completed\", \"path\": \"/fallback/path\"},"
      },
      {
        "line": 419,
        "code": "fallback_results = {",
        "reason": "Unknown",
        "context": "        \"\"\"Execute task using fallback methods when MCP server is unavailable\"\"\"\n        \n        logger.info(f\"Executing fallback task: {tool_name} on {server_name}\")\n        \n        # Basic fallback implementations\n        fallback_results = {\n            \"slack\": {\"message\": \"Slack message would be sent here\", \"channel\": \"general\"},\n            \"github\": {\"issue_number\": 12345, \"status\": \"created\"},\n            \"filesystem\": {\"operation\": \"completed\", \"path\": \"/fallback/path\"},\n            \"search\": {\"results\": [{\"title\": \"Fallback Search Result\", \"url\": \"http://example.com\"}]},"
      },
      {
        "line": 422,
        "code": "\"filesystem\": {\"operation\": \"completed\", \"path\": \"/fallback/path\"},",
        "reason": "Unknown",
        "context": "        \n        # Basic fallback implementations\n        fallback_results = {\n            \"slack\": {\"message\": \"Slack message would be sent here\", \"channel\": \"general\"},\n            \"github\": {\"issue_number\": 12345, \"status\": \"created\"},\n            \"filesystem\": {\"operation\": \"completed\", \"path\": \"/fallback/path\"},\n            \"search\": {\"results\": [{\"title\": \"Fallback Search Result\", \"url\": \"http://example.com\"}]},\n            \"memory\": {\"stored\": True, \"id\": \"fallback_memory_id\"},\n            \"time\": {\"current_time\": datetime.now().isoformat()}\n        }"
      },
      {
        "line": 423,
        "code": "\"search\": {\"results\": [{\"title\": \"Fallback Search Result\", \"url\": \"http://example.com\"}]},",
        "reason": "Unknown",
        "context": "        # Basic fallback implementations\n        fallback_results = {\n            \"slack\": {\"message\": \"Slack message would be sent here\", \"channel\": \"general\"},\n            \"github\": {\"issue_number\": 12345, \"status\": \"created\"},\n            \"filesystem\": {\"operation\": \"completed\", \"path\": \"/fallback/path\"},\n            \"search\": {\"results\": [{\"title\": \"Fallback Search Result\", \"url\": \"http://example.com\"}]},\n            \"memory\": {\"stored\": True, \"id\": \"fallback_memory_id\"},\n            \"time\": {\"current_time\": datetime.now().isoformat()}\n        }\n        "
      },
      {
        "line": 424,
        "code": "\"memory\": {\"stored\": True, \"id\": \"fallback_memory_id\"},",
        "reason": "Unknown",
        "context": "        fallback_results = {\n            \"slack\": {\"message\": \"Slack message would be sent here\", \"channel\": \"general\"},\n            \"github\": {\"issue_number\": 12345, \"status\": \"created\"},\n            \"filesystem\": {\"operation\": \"completed\", \"path\": \"/fallback/path\"},\n            \"search\": {\"results\": [{\"title\": \"Fallback Search Result\", \"url\": \"http://example.com\"}]},\n            \"memory\": {\"stored\": True, \"id\": \"fallback_memory_id\"},\n            \"time\": {\"current_time\": datetime.now().isoformat()}\n        }\n        \n        return {"
      },
      {
        "line": 430,
        "code": "\"result\": fallback_results.get(server_name, {\"fallback\": \"No specific fallback available\"}),",
        "reason": "Unknown",
        "context": "            \"time\": {\"current_time\": datetime.now().isoformat()}\n        }\n        \n        return {\n            \"success\": True,\n            \"result\": fallback_results.get(server_name, {\"fallback\": \"No specific fallback available\"}),\n            \"server\": server_name,\n            \"fallback\": True,\n            \"tool\": tool_name,\n            \"arguments\": arguments"
      },
      {
        "line": 432,
        "code": "\"fallback\": True,",
        "reason": "Unknown",
        "context": "        \n        return {\n            \"success\": True,\n            \"result\": fallback_results.get(server_name, {\"fallback\": \"No specific fallback available\"}),\n            \"server\": server_name,\n            \"fallback\": True,\n            \"tool\": tool_name,\n            \"arguments\": arguments\n        }\n    "
      },
      {
        "line": 484,
        "code": "if server.is_healthy or server.status == \"fallback\":",
        "reason": "Unknown",
        "context": "        \"\"\"Get list of available servers, optionally filtered by capability\"\"\"\n        \n        available = []\n        \n        for name, server in self.servers.items():\n            if server.is_healthy or server.status == \"fallback\":\n                if capability:\n                    if capability in server.config.capabilities:\n                        available.append(name)\n                else:"
      },
      {
        "line": 503,
        "code": "# No healthy servers, try fallback",
        "reason": "Unknown",
        "context": "        for name, server in self.servers.items():\n            if capability in server.config.capabilities and server.is_healthy:\n                candidates.append((name, server.success_rate))\n        \n        if not candidates:\n            # No healthy servers, try fallback\n            for name, server in self.servers.items():\n                if capability in server.config.capabilities:\n                    candidates.append((name, 0.5))  # Lower score for unhealthy\n        "
      }
    ],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "pathlib",
      "typing",
      "logging",
      "asyncio",
      "datetime",
      "contextlib"
    ],
    "circular_imports": []
  },
  "health_monitor": {
    "module_path": "/mnt/c/Users/Brandon/AAI/mcp/health_monitor.py",
    "prp_category": "MCP",
    "overall_status": "WARN",
    "import_success": true,
    "import_time": 0.013849020004272461,
    "import_error": null,
    "functional_tests": {
      "has_async_methods": true,
      "has_init_method": true
    },
    "performance_metrics": {
      "avg_import_time": 0.008191267649332682,
      "max_import_time": 0.00907278060913086,
      "file_size_kb": 19.08984375,
      "total_lines": 519,
      "code_lines": 371
    },
    "issues": [
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 97,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 127,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 134,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 148,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 169,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 326,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "typing",
      "logging",
      "dataclasses",
      "asyncio",
      "enum",
      "datetime"
    ],
    "circular_imports": []
  },
  "delegation_engine": {
    "module_path": "/mnt/c/Users/Brandon/AAI/agents/orchestration/delegation_engine.py",
    "prp_category": "AGENTS_ORCH",
    "overall_status": "WARN",
    "import_success": true,
    "import_time": 0.015629053115844727,
    "import_error": null,
    "functional_tests": {
      "has_async_methods": true,
      "has_init_method": true
    },
    "performance_metrics": {
      "avg_import_time": 0.011887391408284506,
      "max_import_time": 0.017073392868041992,
      "file_size_kb": 35.2265625,
      "total_lines": 879,
      "code_lines": 647
    },
    "issues": [
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 14,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 95,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 525,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [
      {
        "line": 581,
        "code": "# Fallback delegation",
        "reason": "Exception handling: except Exception as e:",
        "context": "            return delegations\n            \n        except Exception as e:\n            logger.error(f\"Delegation analysis failed: {e}\")\n            \n            # Fallback delegation\n            fallback_delegation = TaskDelegation(\n                task_id=f\"{request.session_id or 'req'}_fallback\",\n                task_description=request.query,\n                assigned_agent=AgentSpecialization.GENERAL,"
      },
      {
        "line": 582,
        "code": "fallback_delegation = TaskDelegation(",
        "reason": "Exception handling: except Exception as e:",
        "context": "            \n        except Exception as e:\n            logger.error(f\"Delegation analysis failed: {e}\")\n            \n            # Fallback delegation\n            fallback_delegation = TaskDelegation(\n                task_id=f\"{request.session_id or 'req'}_fallback\",\n                task_description=request.query,\n                assigned_agent=AgentSpecialization.GENERAL,\n                confidence=self.aai_min_confidence,"
      },
      {
        "line": 583,
        "code": "task_id=f\"{request.session_id or 'req'}_fallback\",",
        "reason": "Exception handling: except Exception as e:",
        "context": "        except Exception as e:\n            logger.error(f\"Delegation analysis failed: {e}\")\n            \n            # Fallback delegation\n            fallback_delegation = TaskDelegation(\n                task_id=f\"{request.session_id or 'req'}_fallback\",\n                task_description=request.query,\n                assigned_agent=AgentSpecialization.GENERAL,\n                confidence=self.aai_min_confidence,\n                reasoning=f\"Fallback delegation due to analysis error: {str(e)}\","
      },
      {
        "line": 587,
        "code": "reasoning=f\"Fallback delegation due to analysis error: {str(e)}\",",
        "reason": "Unknown",
        "context": "            fallback_delegation = TaskDelegation(\n                task_id=f\"{request.session_id or 'req'}_fallback\",\n                task_description=request.query,\n                assigned_agent=AgentSpecialization.GENERAL,\n                confidence=self.aai_min_confidence,\n                reasoning=f\"Fallback delegation due to analysis error: {str(e)}\",\n                estimated_complexity=5\n            )\n            \n            return [fallback_delegation]"
      },
      {
        "line": 591,
        "code": "return [fallback_delegation]",
        "reason": "Unknown",
        "context": "                confidence=self.aai_min_confidence,\n                reasoning=f\"Fallback delegation due to analysis error: {str(e)}\",\n                estimated_complexity=5\n            )\n            \n            return [fallback_delegation]\n    \n    async def _select_best_agent(self, \n                               subtask: Dict[str, Any],\n                               preferred_agents: List[AgentSpecialization],"
      }
    ],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "datetime",
      "uuid",
      "typing",
      "logging",
      "asyncio",
      "re"
    ],
    "circular_imports": []
  },
  "primary_agent": {
    "module_path": "/mnt/c/Users/Brandon/AAI/agents/orchestration/primary_agent.py",
    "prp_category": "AGENTS_ORCH",
    "overall_status": "FAIL",
    "import_success": false,
    "import_time": 0.021896839141845703,
    "import_error": "ModuleNotFoundError: No module named 'agents.orchestration.models.models'; 'agents.orchestration.models' is not a package\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 995, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/agents/orchestration/primary_agent.py\", line 35, in <module>\n    from agents.orchestration.models.models import (\nModuleNotFoundError: No module named 'agents.orchestration.models.models'; 'agents.orchestration.models' is not a package\n",
    "functional_tests": {},
    "performance_metrics": {},
    "issues": [
      {
        "severity": "Critical",
        "type": "Import Failure",
        "details": "ModuleNotFoundError: No module named 'agents.orchestration.models.models'; 'agents.orchestration.models' is not a package\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 995, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/agents/orchestration/primary_agent.py\", line 35, in <module>\n    from agents.orchestration.models.models import (\nModuleNotFoundError: No module named 'agents.orchestration.models.models'; 'agents.orchestration.models' is not a package\n"
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 14,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 29,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 39,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 137,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 156,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 219,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 277,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 316,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 372,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 391,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def orchestrate",
          "line": 206,
          "type": "Synchronous HTTP in async function"
        }
      },
      {
        "severity": "Medium",
        "type": "fallback_patterns",
        "details": {
          "line": 380,
          "type": "Exception triggering fallback",
          "content": "except Exception as e:             logger.error(f\"Fallback"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [
      {
        "line": 13,
        "code": "# Pydantic AI imports with fallbacks",
        "reason": "Unknown",
        "context": "import asyncio\nfrom typing import List, Dict, Any, Optional, Union\nfrom datetime import datetime\nimport uuid\n\n# Pydantic AI imports with fallbacks\ntry:\n    from pydantic_ai import Agent, RunContext\n    from pydantic_ai.models import Model\n    PYDANTIC_AI_AVAILABLE = True"
      },
      {
        "line": 71,
        "code": "- Fallback mechanisms for robust operation",
        "reason": "Unknown",
        "context": "    Features:\n    - Intelligent task delegation across specialized agents\n    - Resource management with AsyncExitStack patterns\n    - Real-time performance monitoring and health checks\n    - AAI-compliant confidence scoring and reasoning\n    - Fallback mechanisms for robust operation\n    \"\"\"\n    \n    def __init__(self, model_client: Optional[Any] = None):\n        \"\"\"Initialize primary orchestration agent\"\"\""
      },
      {
        "line": 124,
        "code": "5. Handle failures gracefully with fallback strategies",
        "reason": "Unknown",
        "context": "ORCHESTRATION PRINCIPLES:\n1. Analyze user requests and decompose into subtasks\n2. Select optimal agents based on capabilities and performance\n3. Manage task dependencies and execution order\n4. Provide confidence scores (70-95%) for all decisions\n5. Handle failures gracefully with fallback strategies\n6. Learn from outcomes to improve future delegations\n\nCONFIDENCE SCORING (AAI Standard):\n- 85-95%: High confidence, optimal agent match"
      },
      {
        "line": 169,
        "code": "# Initialize other agents with fallbacks",
        "reason": "Unknown",
        "context": "            self.specialized_agents[AgentSpecialization.SLACK] = SlackAgent()\n            self.specialized_agents[AgentSpecialization.GITHUB] = GitHubAgent()\n            self.specialized_agents[AgentSpecialization.FILESYSTEM] = FilesystemAgent()\n            self.specialized_agents[AgentSpecialization.JINA_SEARCH] = JinaSearchAgent()\n            \n            # Initialize other agents with fallbacks\n            for agent_type in [AgentSpecialization.AIRTABLE, AgentSpecialization.FIRECRAWL,\n                              AgentSpecialization.MEMORY, AgentSpecialization.TIME]:\n                self.specialized_agents[agent_type] = self._create_fallback_agent(agent_type)\n            "
      },
      {
        "line": 172,
        "code": "self.specialized_agents[agent_type] = self._create_fallback_agent(agent_type)",
        "reason": "Unknown",
        "context": "            self.specialized_agents[AgentSpecialization.JINA_SEARCH] = JinaSearchAgent()\n            \n            # Initialize other agents with fallbacks\n            for agent_type in [AgentSpecialization.AIRTABLE, AgentSpecialization.FIRECRAWL,\n                              AgentSpecialization.MEMORY, AgentSpecialization.TIME]:\n                self.specialized_agents[agent_type] = self._create_fallback_agent(agent_type)\n            \n            logger.info(f\"Initialized {len(self.specialized_agents)} specialized agents\")\n            \n        except ImportError as e:"
      },
      {
        "line": 178,
        "code": "# Create fallback agents for missing imports",
        "reason": "Exception handling: except ImportError as e:",
        "context": "            \n            logger.info(f\"Initialized {len(self.specialized_agents)} specialized agents\")\n            \n        except ImportError as e:\n            logger.warning(f\"Some specialized agents not available: {e}\")\n            # Create fallback agents for missing imports\n            await self._create_fallback_agents()\n    \n    def _create_fallback_agent(self, agent_type: AgentSpecialization):\n        \"\"\"Create fallback agent for missing specialized agents\"\"\""
      },
      {
        "line": 179,
        "code": "await self._create_fallback_agents()",
        "reason": "Exception handling: except ImportError as e:",
        "context": "            logger.info(f\"Initialized {len(self.specialized_agents)} specialized agents\")\n            \n        except ImportError as e:\n            logger.warning(f\"Some specialized agents not available: {e}\")\n            # Create fallback agents for missing imports\n            await self._create_fallback_agents()\n    \n    def _create_fallback_agent(self, agent_type: AgentSpecialization):\n        \"\"\"Create fallback agent for missing specialized agents\"\"\"\n        "
      },
      {
        "line": 181,
        "code": "def _create_fallback_agent(self, agent_type: AgentSpecialization):",
        "reason": "Exception handling: except ImportError as e:",
        "context": "        except ImportError as e:\n            logger.warning(f\"Some specialized agents not available: {e}\")\n            # Create fallback agents for missing imports\n            await self._create_fallback_agents()\n    \n    def _create_fallback_agent(self, agent_type: AgentSpecialization):\n        \"\"\"Create fallback agent for missing specialized agents\"\"\"\n        \n        class FallbackAgent:\n            def __init__(self, agent_type):"
      },
      {
        "line": 182,
        "code": "\"\"\"Create fallback agent for missing specialized agents\"\"\"",
        "reason": "Unknown",
        "context": "            logger.warning(f\"Some specialized agents not available: {e}\")\n            # Create fallback agents for missing imports\n            await self._create_fallback_agents()\n    \n    def _create_fallback_agent(self, agent_type: AgentSpecialization):\n        \"\"\"Create fallback agent for missing specialized agents\"\"\"\n        \n        class FallbackAgent:\n            def __init__(self, agent_type):\n                self.agent_type = agent_type"
      },
      {
        "line": 184,
        "code": "class FallbackAgent:",
        "reason": "Unknown",
        "context": "            await self._create_fallback_agents()\n    \n    def _create_fallback_agent(self, agent_type: AgentSpecialization):\n        \"\"\"Create fallback agent for missing specialized agents\"\"\"\n        \n        class FallbackAgent:\n            def __init__(self, agent_type):\n                self.agent_type = agent_type\n                self.name = f\"Fallback {agent_type.value.title()} Agent\"\n            "
      },
      {
        "line": 187,
        "code": "self.name = f\"Fallback {agent_type.value.title()} Agent\"",
        "reason": "Unknown",
        "context": "        \"\"\"Create fallback agent for missing specialized agents\"\"\"\n        \n        class FallbackAgent:\n            def __init__(self, agent_type):\n                self.agent_type = agent_type\n                self.name = f\"Fallback {agent_type.value.title()} Agent\"\n            \n            async def execute_task(self, task: str, context: Dict[str, Any]) -> Dict[str, Any]:\n                return {\n                    \"success\": True,"
      },
      {
        "line": 192,
        "code": "\"result\": f\"Fallback execution for {self.agent_type.value}: {task}\",",
        "reason": "Unknown",
        "context": "                self.name = f\"Fallback {agent_type.value.title()} Agent\"\n            \n            async def execute_task(self, task: str, context: Dict[str, Any]) -> Dict[str, Any]:\n                return {\n                    \"success\": True,\n                    \"result\": f\"Fallback execution for {self.agent_type.value}: {task}\",\n                    \"fallback\": True,\n                    \"agent_type\": self.agent_type.value\n                }\n        "
      },
      {
        "line": 193,
        "code": "\"fallback\": True,",
        "reason": "Unknown",
        "context": "            \n            async def execute_task(self, task: str, context: Dict[str, Any]) -> Dict[str, Any]:\n                return {\n                    \"success\": True,\n                    \"result\": f\"Fallback execution for {self.agent_type.value}: {task}\",\n                    \"fallback\": True,\n                    \"agent_type\": self.agent_type.value\n                }\n        \n        return FallbackAgent(agent_type)"
      },
      {
        "line": 197,
        "code": "return FallbackAgent(agent_type)",
        "reason": "Unknown",
        "context": "                    \"result\": f\"Fallback execution for {self.agent_type.value}: {task}\",\n                    \"fallback\": True,\n                    \"agent_type\": self.agent_type.value\n                }\n        \n        return FallbackAgent(agent_type)\n    \n    async def _create_fallback_agents(self):\n        \"\"\"Create fallback agents for all missing specialized agents\"\"\"\n        "
      },
      {
        "line": 199,
        "code": "async def _create_fallback_agents(self):",
        "reason": "Unknown",
        "context": "                    \"agent_type\": self.agent_type.value\n                }\n        \n        return FallbackAgent(agent_type)\n    \n    async def _create_fallback_agents(self):\n        \"\"\"Create fallback agents for all missing specialized agents\"\"\"\n        \n        for agent_type in AgentSpecialization:\n            if agent_type not in self.specialized_agents:"
      },
      {
        "line": 200,
        "code": "\"\"\"Create fallback agents for all missing specialized agents\"\"\"",
        "reason": "Unknown",
        "context": "                }\n        \n        return FallbackAgent(agent_type)\n    \n    async def _create_fallback_agents(self):\n        \"\"\"Create fallback agents for all missing specialized agents\"\"\"\n        \n        for agent_type in AgentSpecialization:\n            if agent_type not in self.specialized_agents:\n                self.specialized_agents[agent_type] = self._create_fallback_agent(agent_type)"
      },
      {
        "line": 204,
        "code": "self.specialized_agents[agent_type] = self._create_fallback_agent(agent_type)",
        "reason": "Unknown",
        "context": "    async def _create_fallback_agents(self):\n        \"\"\"Create fallback agents for all missing specialized agents\"\"\"\n        \n        for agent_type in AgentSpecialization:\n            if agent_type not in self.specialized_agents:\n                self.specialized_agents[agent_type] = self._create_fallback_agent(agent_type)\n    \n    async def orchestrate(self, request: DelegationRequest) -> DelegationResponse:\n        \"\"\"\n        Main orchestration method for processing delegation requests."
      },
      {
        "line": 239,
        "code": "results = await self._execute_delegations_fallback(delegations, context)",
        "reason": "Unknown",
        "context": "            # Step 2: Execute delegations\n            if self.mcp_manager and self.mcp_manager.is_initialized:\n                async with self.mcp_manager as manager:\n                    results = await self._execute_delegations_with_mcp(delegations, context, manager)\n            else:\n                results = await self._execute_delegations_fallback(delegations, context)\n            \n            # Step 3: Create orchestration result\n            orchestration_result = await self._create_orchestration_result(\n                session_id, request, delegations, results, start_time"
      },
      {
        "line": 350,
        "code": "# Fallback to specialized agent",
        "reason": "Unknown",
        "context": "                    execution_time_seconds=execution_time,\n                    confidence_achieved=delegation.confidence\n                )\n            \n            else:\n                # Fallback to specialized agent\n                return await self._execute_delegation_with_specialized_agent(delegation, context)\n        \n        except Exception as e:\n            execution_time = (datetime.now() - start_time).total_seconds()"
      },
      {
        "line": 365,
        "code": "async def _execute_delegations_fallback(self,",
        "reason": "Unknown",
        "context": "                error_message=str(e),\n                execution_time_seconds=execution_time,\n                confidence_achieved=0.0\n            )\n    \n    async def _execute_delegations_fallback(self,\n                                          delegations: List[TaskDelegation],\n                                          context: OrchestrationContext) -> List[TaskResult]:\n        \"\"\"Execute delegations using fallback mechanisms\"\"\"\n        "
      },
      {
        "line": 368,
        "code": "\"\"\"Execute delegations using fallback mechanisms\"\"\"",
        "reason": "Unknown",
        "context": "            )\n    \n    async def _execute_delegations_fallback(self,\n                                          delegations: List[TaskDelegation],\n                                          context: OrchestrationContext) -> List[TaskResult]:\n        \"\"\"Execute delegations using fallback mechanisms\"\"\"\n        \n        results = []\n        \n        try:"
      },
      {
        "line": 381,
        "code": "logger.error(f\"Fallback delegation execution failed: {e}\")",
        "reason": "Exception handling: except Exception as e:",
        "context": "                results.append(result)\n            \n            return results\n            \n        except Exception as e:\n            logger.error(f\"Fallback delegation execution failed: {e}\")\n            return [self._create_error_result(\"fallback\", str(e))]\n    \n    async def _execute_delegation_with_specialized_agent(self,\n                                                       delegation: TaskDelegation,"
      },
      {
        "line": 382,
        "code": "return [self._create_error_result(\"fallback\", str(e))]",
        "reason": "Exception handling: except Exception as e:",
        "context": "            \n            return results\n            \n        except Exception as e:\n            logger.error(f\"Fallback delegation execution failed: {e}\")\n            return [self._create_error_result(\"fallback\", str(e))]\n    \n    async def _execute_delegation_with_specialized_agent(self,\n                                                       delegation: TaskDelegation,\n                                                       context: OrchestrationContext) -> TaskResult:"
      },
      {
        "line": 633,
        "code": "agent_health[agent_type.value] = \"healthy\" if hasattr(agent, 'execute_task') else \"fallback\"",
        "reason": "Unknown",
        "context": "                mcp_status = {name: info[\"status\"] for name, info in manager_status[\"servers\"].items()}\n        \n        # Agent health status\n        agent_health = {}\n        for agent_type, agent in self.specialized_agents.items():\n            agent_health[agent_type.value] = \"healthy\" if hasattr(agent, 'execute_task') else \"fallback\"\n        \n        # System uptime\n        uptime_hours = (datetime.now() - self.start_time).total_seconds() / 3600\n        "
      }
    ],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "uuid",
      "typing",
      "logging",
      "asyncio",
      "mcp.health_monitor",
      "mcp.server_manager",
      "datetime"
    ],
    "circular_imports": []
  },
  "slack_agent": {
    "module_path": "/mnt/c/Users/Brandon/AAI/agents/specialized/slack_agent.py",
    "prp_category": "AGENTS_SPEC",
    "overall_status": "WARN",
    "import_success": true,
    "import_time": 0.024767160415649414,
    "import_error": null,
    "functional_tests": {
      "has_agent_class": true,
      "has_async_methods": true,
      "has_init_method": true
    },
    "performance_metrics": {
      "avg_import_time": 0.015319585800170898,
      "max_import_time": 0.016763925552368164,
      "file_size_kb": 17.9033203125,
      "total_lines": 512,
      "code_lines": 398
    },
    "issues": [
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 13,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 88,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 226,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 426,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [
      {
        "line": 12,
        "code": "# Slack SDK imports with fallbacks",
        "reason": "Unknown",
        "context": "import logging\nimport asyncio\nfrom typing import Dict, List, Any, Optional\nfrom datetime import datetime\n\n# Slack SDK imports with fallbacks\ntry:\n    from slack_sdk.web.async_client import AsyncWebClient\n    from slack_sdk.errors import SlackApiError\n    SLACK_SDK_AVAILABLE = True"
      },
      {
        "line": 188,
        "code": "\"fallback\": True",
        "reason": "Unknown",
        "context": "        else:\n            return {\n                \"type\": \"send_message\",\n                \"channel\": context.get(\"channel\", \"#general\"),\n                \"message\": task,\n                \"fallback\": True\n            }\n    \n    def _extract_message_content(self, task: str) -> str:\n        \"\"\"Extract message content from task description\"\"\""
      },
      {
        "line": 218,
        "code": "# Fallback to full task",
        "reason": "Unknown",
        "context": "                        content = content[len(prep):].strip()\n                \n                if content:\n                    return content\n        \n        # Fallback to full task\n        return task\n    \n    async def _execute_real_operation(self, operation: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Execute real Slack operation using API\"\"\""
      },
      {
        "line": 330,
        "code": "\"\"\"Execute simulated Slack operation for testing/fallback\"\"\"",
        "reason": "Exception handling: except SlackApiError as e:",
        "context": "        except SlackApiError as e:\n            logger.error(f\"Slack API error: {e}\")\n            return {\"error\": f\"Slack API error: {e.response['error']}\"}\n    \n    async def _execute_simulated_operation(self, operation: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Execute simulated Slack operation for testing/fallback\"\"\"\n        \n        # Simulate API delay\n        await asyncio.sleep(0.1)\n        "
      }
    ],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "asyncio",
      "logging",
      "datetime",
      "typing"
    ],
    "circular_imports": []
  },
  "github_agent": {
    "module_path": "/mnt/c/Users/Brandon/AAI/agents/specialized/github_agent.py",
    "prp_category": "AGENTS_SPEC",
    "overall_status": "WARN",
    "import_success": true,
    "import_time": 0.2926628589630127,
    "import_error": null,
    "functional_tests": {
      "has_agent_class": true,
      "has_async_methods": true,
      "has_init_method": true
    },
    "performance_metrics": {
      "avg_import_time": 0.010526816050211588,
      "max_import_time": 0.011355400085449219,
      "file_size_kb": 26.5771484375,
      "total_lines": 701,
      "code_lines": 538
    },
    "issues": [
      {
        "severity": "High",
        "type": "hardcoded_values",
        "details": {
          "line": 37,
          "type": "Hardcoded URL",
          "content": "\"https://api.github.com\""
        }
      },
      {
        "severity": "High",
        "type": "hardcoded_values",
        "details": {
          "line": 506,
          "type": "Hardcoded URL",
          "content": "\"https://github.com/{operation['"
        }
      },
      {
        "severity": "High",
        "type": "hardcoded_values",
        "details": {
          "line": 519,
          "type": "Hardcoded URL",
          "content": "\"https://github.com/{operation['"
        }
      },
      {
        "severity": "High",
        "type": "hardcoded_values",
        "details": {
          "line": 526,
          "type": "Hardcoded URL",
          "content": "\"https://github.com/{operation['"
        }
      },
      {
        "severity": "High",
        "type": "hardcoded_values",
        "details": {
          "line": 542,
          "type": "Hardcoded URL",
          "content": "\"https://github.com/{operation['"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 14,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 107,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 381,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 591,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [
      {
        "line": 13,
        "code": "# GitHub SDK imports with fallbacks",
        "reason": "Unknown",
        "context": "import asyncio\nfrom typing import Dict, List, Any, Optional\nfrom datetime import datetime\nimport re\n\n# GitHub SDK imports with fallbacks\ntry:\n    import aiohttp\n    HTTP_CLIENT_AVAILABLE = True\nexcept ImportError:"
      },
      {
        "line": 261,
        "code": "\"fallback\": True",
        "reason": "Unknown",
        "context": "            return {\n                \"type\": \"create_issue\",\n                \"repo\": context.get(\"repo\", \"unknown/repo\"),\n                \"title\": task,\n                \"body\": f\"Created via AAI orchestration: {task}\",\n                \"fallback\": True\n            }\n    \n    def _extract_repo_from_task(self, task: str) -> str:\n        \"\"\"Extract repository name from task description\"\"\""
      },
      {
        "line": 310,
        "code": "# Fallback to task itself",
        "reason": "Unknown",
        "context": "                if remaining:\n                    # Take first sentence or up to 100 chars\n                    title = remaining.split('.')[0][:100]\n                    return title.strip()\n        \n        # Fallback to task itself\n        return task[:100]\n    \n    def _extract_issue_body(self, task: str) -> str:\n        \"\"\"Extract issue body from task description\"\"\""
      },
      {
        "line": 362,
        "code": "return self._extract_issue_number(task)  # Fallback to issue number logic",
        "reason": "Unknown",
        "context": "        match = re.search(pr_pattern, task, re.IGNORECASE)\n        \n        if match:\n            return int(match.group(1) or match.group(2))\n        \n        return self._extract_issue_number(task)  # Fallback to issue number logic\n    \n    def _extract_file_path(self, task: str) -> str:\n        \"\"\"Extract file path from task description\"\"\"\n        "
      },
      {
        "line": 494,
        "code": "\"\"\"Execute simulated GitHub operation for testing/fallback\"\"\"",
        "reason": "Exception handling: except aiohttp.ClientError as e:",
        "context": "        except aiohttp.ClientError as e:\n            logger.error(f\"GitHub API error: {e}\")\n            return {\"error\": f\"GitHub API error: {str(e)}\"}\n    \n    async def _execute_simulated_operation(self, operation: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Execute simulated GitHub operation for testing/fallback\"\"\"\n        \n        # Simulate API delay\n        await asyncio.sleep(0.2)\n        "
      }
    ],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "datetime",
      "typing",
      "logging",
      "asyncio",
      "re"
    ],
    "circular_imports": []
  },
  "filesystem_agent": {
    "module_path": "/mnt/c/Users/Brandon/AAI/agents/specialized/filesystem_agent.py",
    "prp_category": "AGENTS_SPEC",
    "overall_status": "FAIL",
    "import_success": false,
    "import_time": 0.026307344436645508,
    "import_error": "ModuleNotFoundError: No module named 'aiofiles'\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 995, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/agents/specialized/filesystem_agent.py\", line 15, in <module>\n    import aiofiles\nModuleNotFoundError: No module named 'aiofiles'\n",
    "functional_tests": {},
    "performance_metrics": {},
    "issues": [
      {
        "severity": "Critical",
        "type": "Import Failure",
        "details": "ModuleNotFoundError: No module named 'aiofiles'\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 995, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/agents/specialized/filesystem_agent.py\", line 15, in <module>\n    import aiofiles\nModuleNotFoundError: No module named 'aiofiles'\n"
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 99,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 423,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 438,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 765,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def _read_file",
          "line": 492,
          "type": "Synchronous file I/O in async function"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def _read_file",
          "line": 492,
          "type": "Synchronous I/O operations"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def _write_file",
          "line": 518,
          "type": "Synchronous file I/O in async function"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def _write_file",
          "line": 518,
          "type": "Synchronous I/O operations"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def _search_files",
          "line": 742,
          "type": "Synchronous file I/O in async function"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def _search_files",
          "line": 742,
          "type": "Synchronous I/O operations"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      },
      {
        "severity": "High",
        "type": "Resource Leak",
        "details": "Unclosed file handle"
      }
    ],
    "fallback_triggers": [
      {
        "line": 243,
        "code": "\"fallback\": True",
        "reason": "Unknown",
        "context": "        # Default to file reading\n        else:\n            return {\n                \"type\": \"read_file\",\n                \"path\": context.get(\"path\", task),\n                \"fallback\": True\n            }\n    \n    def _extract_file_path(self, task: str) -> str:\n        \"\"\"Extract file path from task description\"\"\""
      },
      {
        "line": 325,
        "code": "# Fallback to first path-like word",
        "reason": "Unknown",
        "context": "            # Extract first path-like word\n            for word in remaining.split():\n                if '/' in word or '\\\\' in word or '.' in word:\n                    return word.strip('.,;:\"')\n        \n        # Fallback to first path-like word\n        for word in words:\n            if '/' in word or '\\\\' in word:\n                return word.strip('.,;:\"')\n        "
      }
    ],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [
      "Unclosed file handle"
    ],
    "integration_issues": [],
    "dependencies": [
      "os",
      "typing",
      "pathlib",
      "aiofiles",
      "logging",
      "asyncio",
      "mimetypes",
      "shutil",
      "datetime",
      "json"
    ],
    "circular_imports": []
  },
  "jina_search_agent": {
    "module_path": "/mnt/c/Users/Brandon/AAI/agents/specialized/jina_search_agent.py",
    "prp_category": "AGENTS_SPEC",
    "overall_status": "WARN",
    "import_success": true,
    "import_time": 0.014172792434692383,
    "import_error": null,
    "functional_tests": {
      "has_agent_class": true,
      "has_async_methods": true,
      "has_init_method": true
    },
    "performance_metrics": {
      "avg_import_time": 0.00946044921875,
      "max_import_time": 0.011003494262695312,
      "file_size_kb": 27.4287109375,
      "total_lines": 756,
      "code_lines": 584
    },
    "issues": [
      {
        "severity": "High",
        "type": "hardcoded_values",
        "details": {
          "line": 41,
          "type": "Hardcoded URL",
          "content": "\"https://s.jina.ai\""
        }
      },
      {
        "severity": "High",
        "type": "hardcoded_values",
        "details": {
          "line": 383,
          "type": "Hardcoded URL",
          "content": "\"https://r.jina.ai/{target_url}\""
        }
      },
      {
        "severity": "High",
        "type": "hardcoded_values",
        "details": {
          "line": 427,
          "type": "Hardcoded URL",
          "content": "\"https://example-{i+1}.com/search-result\""
        }
      },
      {
        "severity": "High",
        "type": "hardcoded_values",
        "details": {
          "line": 445,
          "type": "Hardcoded URL",
          "content": "\"https://news-{i+1}.com/article\""
        }
      },
      {
        "severity": "High",
        "type": "hardcoded_values",
        "details": {
          "line": 464,
          "type": "Hardcoded URL",
          "content": "\"https://images.example.com/image{i+1}.jpg\""
        }
      },
      {
        "severity": "High",
        "type": "hardcoded_values",
        "details": {
          "line": 465,
          "type": "Hardcoded URL",
          "content": "\"https://images.example.com/thumb{i+1}.jpg\""
        }
      },
      {
        "severity": "High",
        "type": "hardcoded_values",
        "details": {
          "line": 479,
          "type": "Hardcoded URL",
          "content": "\"https://example.com\""
        }
      },
      {
        "severity": "High",
        "type": "hardcoded_values",
        "details": {
          "line": 714,
          "type": "Hardcoded URL",
          "content": "\"https://example.com/article\""
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 14,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 119,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 325,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 600,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 639,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [
      {
        "line": 13,
        "code": "# HTTP client imports with fallbacks",
        "reason": "Unknown",
        "context": "import asyncio\nfrom typing import Dict, List, Any, Optional\nfrom datetime import datetime\nimport re\n\n# HTTP client imports with fallbacks\ntry:\n    import aiohttp\n    HTTP_CLIENT_AVAILABLE = True\nexcept ImportError:"
      },
      {
        "line": 271,
        "code": "# Fallback: use the entire task as query",
        "reason": "Unknown",
        "context": "                    # Clean up the query\n                    query = self._clean_search_query(remaining)\n                    if query:\n                        return query\n        \n        # Fallback: use the entire task as query\n        return self._clean_search_query(task)\n    \n    def _clean_search_query(self, query: str) -> str:\n        \"\"\"Clean and optimize search query\"\"\""
      },
      {
        "line": 400,
        "code": "# Fallback to web search for unknown types",
        "reason": "Unknown",
        "context": "                        \"query\": query,\n                        \"count\": 5\n                    })\n            \n            else:\n                # Fallback to web search for unknown types\n                return await self._execute_real_search({\n                    \"type\": \"web_search\",\n                    \"query\": query,\n                    \"count\": operation.get(\"count\", 10)"
      },
      {
        "line": 412,
        "code": "\"\"\"Execute simulated search for testing/fallback\"\"\"",
        "reason": "Exception handling: except aiohttp.ClientError as e:",
        "context": "        except aiohttp.ClientError as e:\n            logger.error(f\"Jina Search API error: {e}\")\n            return {\"error\": f\"Search API error: {str(e)}\"}\n    \n    async def _execute_simulated_search(self, operation: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Execute simulated search for testing/fallback\"\"\"\n        \n        # Simulate API delay\n        await asyncio.sleep(0.3)\n        "
      }
    ],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "datetime",
      "typing",
      "logging",
      "asyncio",
      "re"
    ],
    "circular_imports": []
  },
  "conversation_engine": {
    "module_path": "/mnt/c/Users/Brandon/AAI/agents/tech_expert/conversation_engine.py",
    "prp_category": "AGENTS_TECH",
    "overall_status": "WARN",
    "import_success": true,
    "import_time": 0.01617431640625,
    "import_error": null,
    "functional_tests": {
      "has_async_methods": true,
      "has_init_method": true
    },
    "performance_metrics": {
      "avg_import_time": 0.009369850158691406,
      "max_import_time": 0.010445594787597656,
      "file_size_kb": 26.431640625,
      "total_lines": 623,
      "code_lines": 456
    },
    "issues": [
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 14,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 594,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [
      {
        "line": 377,
        "code": "return ApplicationType.WEB_APP  # Default fallback",
        "reason": "Unknown",
        "context": "        elif any(keyword in input_lower for keyword in [\"real-time\", \"chat\", \"gaming\", \"live\"]):\n            return ApplicationType.REAL_TIME_APP\n        elif any(keyword in input_lower for keyword in [\"static\", \"blog\", \"cms\"]):\n            return ApplicationType.STATIC_SITE\n        else:\n            return ApplicationType.WEB_APP  # Default fallback\n    \n    async def _parse_user_scale(self, user_input: str) -> UserScale:\n        \"\"\"Parse user scale from user input\"\"\"\n        "
      },
      {
        "line": 395,
        "code": "return UserScale.MEDIUM  # Default fallback",
        "reason": "Unknown",
        "context": "        elif any(keyword in input_lower for keyword in [\"large\", \"100000\", \"100k\"]):\n            return UserScale.LARGE\n        elif any(keyword in input_lower for keyword in [\"enterprise\", \"million\", \"massive\"]):\n            return UserScale.ENTERPRISE\n        else:\n            return UserScale.MEDIUM  # Default fallback\n    \n    async def _parse_ai_integration(self, user_input: str) -> bool:\n        \"\"\"Parse AI integration requirement from user input\"\"\"\n        "
      },
      {
        "line": 423,
        "code": "return ExperienceLevel.INTERMEDIATE  # Default fallback",
        "reason": "Unknown",
        "context": "        elif any(keyword in input_lower for keyword in [\"advanced\", \"3-5\", \"experienced\"]):\n            return ExperienceLevel.ADVANCED\n        elif any(keyword in input_lower for keyword in [\"expert\", \"5+\", \"senior\", \"master\"]):\n            return ExperienceLevel.EXPERT\n        else:\n            return ExperienceLevel.INTERMEDIATE  # Default fallback\n    \n    async def _parse_constraints(self, conversation: ConversationState, user_input: str):\n        \"\"\"Parse additional constraints from user input\"\"\"\n        "
      }
    ],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "uuid",
      "typing",
      "logging",
      "asyncio",
      "datetime"
    ],
    "circular_imports": []
  },
  "recommender": {
    "module_path": "/mnt/c/Users/Brandon/AAI/agents/tech_expert/recommender.py",
    "prp_category": "AGENTS_TECH",
    "overall_status": "FAIL",
    "import_success": false,
    "import_time": 0.014058113098144531,
    "import_error": "ModuleNotFoundError: No module named 'agents.tech_expert.models.models'; 'agents.tech_expert.models' is not a package\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 995, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/agents/tech_expert/recommender.py\", line 19, in <module>\n    from agents.tech_expert.models.models import (\nModuleNotFoundError: No module named 'agents.tech_expert.models.models'; 'agents.tech_expert.models' is not a package\n",
    "functional_tests": {},
    "performance_metrics": {},
    "issues": [
      {
        "severity": "Critical",
        "type": "Import Failure",
        "details": "ModuleNotFoundError: No module named 'agents.tech_expert.models.models'; 'agents.tech_expert.models' is not a package\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 995, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/agents/tech_expert/recommender.py\", line 19, in <module>\n    from agents.tech_expert.models.models import (\nModuleNotFoundError: No module named 'agents.tech_expert.models.models'; 'agents.tech_expert.models' is not a package\n"
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 13,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 901,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      },
      {
        "severity": "Medium",
        "type": "Integration Issue",
        "details": "Missing comprehensive error handling for AAI integration"
      }
    ],
    "fallback_triggers": [],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [
      "Missing comprehensive error handling for AAI integration"
    ],
    "dependencies": [
      "asyncio",
      "logging",
      "datetime",
      "typing"
    ],
    "circular_imports": []
  },
  "dual_model_agent": {
    "module_path": "/mnt/c/Users/Brandon/AAI/agents/r1_reasoning/dual_model_agent.py",
    "prp_category": "AGENTS_R1",
    "overall_status": "FAIL",
    "import_success": false,
    "import_time": 0.03218245506286621,
    "import_error": "IndentationError: expected an indented block after 'try' statement on line 36 (dual_model_agent.py, line 37)\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 991, in exec_module\n  File \"<frozen importlib._bootstrap_external>\", line 1129, in get_code\n  File \"<frozen importlib._bootstrap_external>\", line 1059, in source_to_code\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/agents/r1_reasoning/dual_model_agent.py\", line 37\n    from .reasoning_engine import ReasoningEngine as R1ReasoningEngine\n    ^^^^\nIndentationError: expected an indented block after 'try' statement on line 36\n",
    "functional_tests": {},
    "performance_metrics": {},
    "issues": [
      {
        "severity": "Critical",
        "type": "Import Failure",
        "details": "IndentationError: expected an indented block after 'try' statement on line 36 (dual_model_agent.py, line 37)\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 991, in exec_module\n  File \"<frozen importlib._bootstrap_external>\", line 1129, in get_code\n  File \"<frozen importlib._bootstrap_external>\", line 1059, in source_to_code\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/agents/r1_reasoning/dual_model_agent.py\", line 37\n    from .reasoning_engine import ReasoningEngine as R1ReasoningEngine\n    ^^^^\nIndentationError: expected an indented block after 'try' statement on line 36\n"
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 15,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 23,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 35,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 36,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 43,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 44,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 51,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 57,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 108,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 153,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 227,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 272,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 325,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 345,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 395,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 462,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 559,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 580,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 697,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [
      {
        "line": 14,
        "code": "# Smolagents imports with fallback",
        "reason": "Unknown",
        "context": "import uuid\nfrom typing import List, Dict, Any, Optional, Union, Callable\nfrom datetime import datetime\nfrom dataclasses import dataclass\n\n# Smolagents imports with fallback\ntry:\n    from smolagents import CodeAgent, ToolCallingAgent, Tool, HfApiModel\n    from smolagents.agents import MultiStepAgent\n    SMOLAGENTS_AVAILABLE = True"
      },
      {
        "line": 34,
        "code": "# Import with fallback handling",
        "reason": "Unknown",
        "context": "    from agents.r1_reasoning.models.models import (\n        ReasoningChain, ReasoningStep, DocumentAnalysisRequest, ReasoningResponse,\n        ConfidenceAnalysis, ModelInferenceConfig, ReasoningDepth, ReasoningMethod\n    )\n\n# Import with fallback handling\ntry:\n    try:\n    from .reasoning_engine import ReasoningEngine as R1ReasoningEngine\nexcept ImportError:"
      },
      {
        "line": 220,
        "code": "logger.warning(\"Smolagents not available - using fallback implementation\")",
        "reason": "Unknown",
        "context": "        self.tool_agent = None\n        \n        if self.smolagents_ready:\n            self._initialize_smolagents()\n        else:\n            logger.warning(\"Smolagents not available - using fallback implementation\")\n        \n        # Initialize tools\n        self.tools = self._initialize_tools()\n    "
      },
      {
        "line": 409,
        "code": "# Fallback reasoning using tool execution model",
        "reason": "Unknown",
        "context": "                )\n                \n                return reasoning_chain\n            \n            else:\n                # Fallback reasoning using tool execution model\n                return await self._fallback_reasoning(request, documents)\n                \n        except Exception as e:\n            logger.error(f\"Reasoning generation failed: {e}\")"
      },
      {
        "line": 410,
        "code": "return await self._fallback_reasoning(request, documents)",
        "reason": "Unknown",
        "context": "                \n                return reasoning_chain\n            \n            else:\n                # Fallback reasoning using tool execution model\n                return await self._fallback_reasoning(request, documents)\n                \n        except Exception as e:\n            logger.error(f\"Reasoning generation failed: {e}\")\n            return await self._fallback_reasoning(request, documents)"
      },
      {
        "line": 414,
        "code": "return await self._fallback_reasoning(request, documents)",
        "reason": "Exception handling: except Exception as e:",
        "context": "                # Fallback reasoning using tool execution model\n                return await self._fallback_reasoning(request, documents)\n                \n        except Exception as e:\n            logger.error(f\"Reasoning generation failed: {e}\")\n            return await self._fallback_reasoning(request, documents)\n    \n    async def _fallback_reasoning(self,\n                                request: DocumentAnalysisRequest,\n                                documents: List[Dict[str, Any]]) -> ReasoningChain:"
      },
      {
        "line": 416,
        "code": "async def _fallback_reasoning(self,",
        "reason": "Exception handling: except Exception as e:",
        "context": "                \n        except Exception as e:\n            logger.error(f\"Reasoning generation failed: {e}\")\n            return await self._fallback_reasoning(request, documents)\n    \n    async def _fallback_reasoning(self,\n                                request: DocumentAnalysisRequest,\n                                documents: List[Dict[str, Any]]) -> ReasoningChain:\n        \"\"\"Fallback reasoning when main engine unavailable\"\"\"\n        "
      },
      {
        "line": 419,
        "code": "\"\"\"Fallback reasoning when main engine unavailable\"\"\"",
        "reason": "Unknown",
        "context": "            return await self._fallback_reasoning(request, documents)\n    \n    async def _fallback_reasoning(self,\n                                request: DocumentAnalysisRequest,\n                                documents: List[Dict[str, Any]]) -> ReasoningChain:\n        \"\"\"Fallback reasoning when main engine unavailable\"\"\"\n        \n        # Create simple reasoning chain\n        steps = [\n            ReasoningStep("
      },
      {
        "line": 515,
        "code": "# Fallback confidence analysis",
        "reason": "Unknown",
        "context": "        if self.confidence_scorer:\n            confidence_analysis = self.confidence_scorer.calculate_comprehensive_confidence(\n                reasoning_chain, documents, tool_results\n            )\n        else:\n            # Fallback confidence analysis\n            confidence_analysis = ConfidenceAnalysis(\n                overall=reasoning_chain.overall_confidence,\n                reasoning_confidence=reasoning_chain.overall_confidence,\n                evidence_confidence=0.7 if documents else 0.3,"
      }
    ],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "uuid",
      "typing",
      "logging",
      "dataclasses",
      "asyncio",
      "datetime"
    ],
    "circular_imports": []
  },
  "reasoning_engine": {
    "module_path": "/mnt/c/Users/Brandon/AAI/agents/r1_reasoning/reasoning_engine.py",
    "prp_category": "AGENTS_R1",
    "overall_status": "FAIL",
    "import_success": false,
    "import_time": 0.3440239429473877,
    "import_error": "IndentationError: expected an indented block after 'try' statement on line 36 (dual_model_agent.py, line 37)\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/agents/r1_reasoning/reasoning_engine.py\", line 16, in <module>\n    from .models import (\nImportError: attempted relative import with no known parent package\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 995, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/agents/r1_reasoning/reasoning_engine.py\", line 22, in <module>\n    from agents.r1_reasoning.models.models import (\n  File \"/mnt/c/Users/Brandon/AAI/agents/r1_reasoning/__init__.py\", line 32, in <module>\n    from .dual_model_agent import DualModelAgent, AgentTask, AgentResult\n  File \"/mnt/c/Users/Brandon/AAI/agents/r1_reasoning/dual_model_agent.py\", line 37\n    from .reasoning_engine import ReasoningEngine as R1ReasoningEngine\n    ^^^^\nIndentationError: expected an indented block after 'try' statement on line 36\n",
    "functional_tests": {},
    "performance_metrics": {},
    "issues": [
      {
        "severity": "Critical",
        "type": "Import Failure",
        "details": "IndentationError: expected an indented block after 'try' statement on line 36 (dual_model_agent.py, line 37)\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/agents/r1_reasoning/reasoning_engine.py\", line 16, in <module>\n    from .models import (\nImportError: attempted relative import with no known parent package\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 995, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/agents/r1_reasoning/reasoning_engine.py\", line 22, in <module>\n    from agents.r1_reasoning.models.models import (\n  File \"/mnt/c/Users/Brandon/AAI/agents/r1_reasoning/__init__.py\", line 32, in <module>\n    from .dual_model_agent import DualModelAgent, AgentTask, AgentResult\n  File \"/mnt/c/Users/Brandon/AAI/agents/r1_reasoning/dual_model_agent.py\", line 37\n    from .reasoning_engine import ReasoningEngine as R1ReasoningEngine\n    ^^^^\nIndentationError: expected an indented block after 'try' statement on line 36\n"
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 15,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 27,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 85,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 163,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 417,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 598,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 628,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Circular Import Risk",
        "details": "Potential circular import with re"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [
      {
        "line": 497,
        "code": "# Fallback parsing",
        "reason": "Exception handling: except Exception as e:",
        "context": "                overall_confidence = max(0.70, model_confidence)\n            \n        except Exception as e:\n            logger.warning(f\"Failed to parse reasoning chain: {e}\")\n            \n            # Fallback parsing\n            overall_confidence = max(0.70, model_confidence)\n            if not reasoning_steps:\n                reasoning_steps = [\n                    ReasoningStep("
      }
    ],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "datetime",
      "uuid",
      "typing",
      "logging",
      "time",
      "asyncio",
      "inference.model_router",
      "re"
    ],
    "circular_imports": [
      "Potential circular import with re"
    ]
  },
  "confidence_scorer": {
    "module_path": "/mnt/c/Users/Brandon/AAI/agents/tool-selection/confidence_scorer.py",
    "prp_category": "AGENTS_TOOL",
    "overall_status": "FAIL",
    "import_success": false,
    "import_time": -49.06829833984375,
    "import_error": "IndentationError: expected an indented block after 'try' statement on line 439 (confidence_scorer.py, line 440)\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 991, in exec_module\n  File \"<frozen importlib._bootstrap_external>\", line 1129, in get_code\n  File \"<frozen importlib._bootstrap_external>\", line 1059, in source_to_code\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/agents/tool-selection/confidence_scorer.py\", line 440\n    from .models import ContextAnalysis, FabricPattern, ToolMetadata, PromptContext, ToolCategory\n    ^^^^\nIndentationError: expected an indented block after 'try' statement on line 439\n",
    "functional_tests": {},
    "performance_metrics": {},
    "issues": [
      {
        "severity": "Critical",
        "type": "Import Failure",
        "details": "IndentationError: expected an indented block after 'try' statement on line 439 (confidence_scorer.py, line 440)\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 991, in exec_module\n  File \"<frozen importlib._bootstrap_external>\", line 1129, in get_code\n  File \"<frozen importlib._bootstrap_external>\", line 1059, in source_to_code\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/agents/tool-selection/confidence_scorer.py\", line 440\n    from .models import ContextAnalysis, FabricPattern, ToolMetadata, PromptContext, ToolCategory\n    ^^^^\nIndentationError: expected an indented block after 'try' statement on line 439\n"
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 12,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 81,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 439,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "logging",
      "datetime",
      "math",
      "typing"
    ],
    "circular_imports": []
  },
  "tool_selector": {
    "module_path": "/mnt/c/Users/Brandon/AAI/agents/tool-selection/tool_selector.py",
    "prp_category": "AGENTS_TOOL",
    "overall_status": "FAIL",
    "import_success": false,
    "import_time": 0.036235809326171875,
    "import_error": "IndentationError: expected an indented block after 'try' statement on line 294 (tool_selector.py, line 295)\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 991, in exec_module\n  File \"<frozen importlib._bootstrap_external>\", line 1129, in get_code\n  File \"<frozen importlib._bootstrap_external>\", line 1059, in source_to_code\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/agents/tool-selection/tool_selector.py\", line 295\n    from .models import SelectionResult\nIndentationError: expected an indented block after 'try' statement on line 294\n",
    "functional_tests": {},
    "performance_metrics": {},
    "issues": [
      {
        "severity": "Critical",
        "type": "Import Failure",
        "details": "IndentationError: expected an indented block after 'try' statement on line 294 (tool_selector.py, line 295)\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 991, in exec_module\n  File \"<frozen importlib._bootstrap_external>\", line 1129, in get_code\n  File \"<frozen importlib._bootstrap_external>\", line 1059, in source_to_code\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/agents/tool-selection/tool_selector.py\", line 295\n    from .models import SelectionResult\nIndentationError: expected an indented block after 'try' statement on line 294\n"
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 12,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 22,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 26,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 30,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 216,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 294,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 644,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [
      {
        "line": 332,
        "code": "# Fallback response",
        "reason": "Exception handling: except Exception as e:",
        "context": "            return response\n            \n        except Exception as e:\n            logger.error(f\"Tool selection failed: {e}\")\n            \n            # Fallback response\n            fallback_response = await self._create_fallback_response(request, str(e))\n            return fallback_response\n    \n    async def _select_optimal_tools(self, "
      },
      {
        "line": 333,
        "code": "fallback_response = await self._create_fallback_response(request, str(e))",
        "reason": "Exception handling: except Exception as e:",
        "context": "            \n        except Exception as e:\n            logger.error(f\"Tool selection failed: {e}\")\n            \n            # Fallback response\n            fallback_response = await self._create_fallback_response(request, str(e))\n            return fallback_response\n    \n    async def _select_optimal_tools(self, \n                                  context_analysis: ContextAnalysis,"
      },
      {
        "line": 334,
        "code": "return fallback_response",
        "reason": "Exception handling: except Exception as e:",
        "context": "        except Exception as e:\n            logger.error(f\"Tool selection failed: {e}\")\n            \n            # Fallback response\n            fallback_response = await self._create_fallback_response(request, str(e))\n            return fallback_response\n    \n    async def _select_optimal_tools(self, \n                                  context_analysis: ContextAnalysis,\n                                  preferred_tools: List[str],"
      },
      {
        "line": 624,
        "code": "async def _create_fallback_response(self, request: SelectionRequest, error: str) -> SelectionResponse:",
        "reason": "Unknown",
        "context": "            selection_result.tool_selection.estimated_time_minutes > 8):\n            warnings.append(\"High urgency task with significant time requirement\")\n        \n        return warnings\n    \n    async def _create_fallback_response(self, request: SelectionRequest, error: str) -> SelectionResponse:\n        \"\"\"Create fallback response when selection fails\"\"\"\n        \n        # Create minimal context analysis\n        context_analysis = ContextAnalysis("
      },
      {
        "line": 625,
        "code": "\"\"\"Create fallback response when selection fails\"\"\"",
        "reason": "Unknown",
        "context": "            warnings.append(\"High urgency task with significant time requirement\")\n        \n        return warnings\n    \n    async def _create_fallback_response(self, request: SelectionRequest, error: str) -> SelectionResponse:\n        \"\"\"Create fallback response when selection fails\"\"\"\n        \n        # Create minimal context analysis\n        context_analysis = ContextAnalysis(\n            original_prompt=request.prompt,"
      },
      {
        "line": 640,
        "code": "reasoning=f\"Fallback selection due to error: {error}\"",
        "reason": "Unknown",
        "context": "        # Create minimal tool selection\n        tool_selection = ToolSelection(\n            prompt_snippet=context_analysis.prompt_snippet,\n            detected_context=context_analysis.detected_context,\n            confidence_score=0.70,\n            reasoning=f\"Fallback selection due to error: {error}\"\n        )\n        \n        # Create selection result\n        try:"
      },
      {
        "line": 651,
        "code": "session_id=request.session_id or \"fallback\"",
        "reason": "Exception handling: except ImportError:",
        "context": "except ImportError:\n    from agents.tool_selection.models import SelectionResult\n        selection_result = SelectionResult(\n            context_analysis=context_analysis,\n            tool_selection=tool_selection,\n            session_id=request.session_id or \"fallback\"\n        )\n        \n        return SelectionResponse(\n            selection_result=selection_result,"
      }
    ],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "asyncio",
      "logging",
      "datetime",
      "typing"
    ],
    "circular_imports": []
  },
  "learning_engine": {
    "module_path": "/mnt/c/Users/Brandon/AAI/agents/tool-selection/learning_engine.py",
    "prp_category": "AGENTS_TOOL",
    "overall_status": "FAIL",
    "import_success": false,
    "import_time": 0.06356310844421387,
    "import_error": "IndentationError: expected an indented block after 'try' statement on line 687 (learning_engine.py, line 688)\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 991, in exec_module\n  File \"<frozen importlib._bootstrap_external>\", line 1129, in get_code\n  File \"<frozen importlib._bootstrap_external>\", line 1059, in source_to_code\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/agents/tool-selection/learning_engine.py\", line 688\n    from .models import ContextAnalysis, ToolSelection, SelectionResult, PromptContext\n    ^^^^\nIndentationError: expected an indented block after 'try' statement on line 687\n",
    "functional_tests": {},
    "performance_metrics": {},
    "issues": [
      {
        "severity": "Critical",
        "type": "Import Failure",
        "details": "IndentationError: expected an indented block after 'try' statement on line 687 (learning_engine.py, line 688)\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 991, in exec_module\n  File \"<frozen importlib._bootstrap_external>\", line 1129, in get_code\n  File \"<frozen importlib._bootstrap_external>\", line 1059, in source_to_code\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/agents/tool-selection/learning_engine.py\", line 688\n    from .models import ContextAnalysis, ToolSelection, SelectionResult, PromptContext\n    ^^^^\nIndentationError: expected an indented block after 'try' statement on line 687\n"
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 14,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 95,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 204,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 303,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 592,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 623,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 687,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def _save_learning_data",
          "line": 589,
          "type": "Synchronous file I/O in async function"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def _load_learning_data",
          "line": 620,
          "type": "Synchronous file I/O in async function"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      },
      {
        "severity": "High",
        "type": "Resource Leak",
        "details": "Unclosed file handle"
      }
    ],
    "fallback_triggers": [],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [
      "Unclosed file handle"
    ],
    "integration_issues": [],
    "dependencies": [
      "pathlib",
      "typing",
      "logging",
      "asyncio",
      "datetime",
      "json"
    ],
    "circular_imports": []
  },
  "fabric_integrator": {
    "module_path": "/mnt/c/Users/Brandon/AAI/agents/tool-selection/fabric_integrator.py",
    "prp_category": "AGENTS_TOOL",
    "overall_status": "FAIL",
    "import_success": false,
    "import_time": 0.04706692695617676,
    "import_error": "ModuleNotFoundError: No module named 'aiofiles'\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 995, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/agents/tool-selection/fabric_integrator.py\", line 10, in <module>\n    import aiofiles\nModuleNotFoundError: No module named 'aiofiles'\n",
    "functional_tests": {},
    "performance_metrics": {},
    "issues": [
      {
        "severity": "Critical",
        "type": "Import Failure",
        "details": "ModuleNotFoundError: No module named 'aiofiles'\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 995, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/agents/tool-selection/fabric_integrator.py\", line 10, in <module>\n    import aiofiles\nModuleNotFoundError: No module named 'aiofiles'\n"
      },
      {
        "severity": "High",
        "type": "hardcoded_values",
        "details": {
          "line": 48,
          "type": "Hardcoded URL",
          "content": "\"https://github.com/danielmiessler/fabric\""
        }
      },
      {
        "severity": "High",
        "type": "hardcoded_values",
        "details": {
          "line": 353,
          "type": "Hardcoded URL",
          "content": "\"https://api.github.com/repos/danielmiessler/fabric/contents/patterns\""
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 16,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 20,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 27,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 232,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 283,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 303,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 314,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 351,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 441,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 522,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 541,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def _parse_local_pattern",
          "line": 300,
          "type": "Synchronous file I/O in async function"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def _parse_local_pattern",
          "line": 300,
          "type": "Synchronous I/O operations"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def _discover_remote_patterns",
          "line": 343,
          "type": "Synchronous HTTP in async function"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def _load_patterns_from_cache",
          "line": 517,
          "type": "Synchronous file I/O in async function"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def _load_patterns_from_cache",
          "line": 517,
          "type": "Synchronous I/O operations"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def _cache_patterns",
          "line": 538,
          "type": "Synchronous file I/O in async function"
        }
      },
      {
        "severity": "High",
        "type": "blocking_operations",
        "details": {
          "function": "async def _cache_patterns",
          "line": 538,
          "type": "Synchronous I/O operations"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      },
      {
        "severity": "High",
        "type": "Resource Leak",
        "details": "Unclosed file handle"
      }
    ],
    "fallback_triggers": [
      {
        "line": 102,
        "code": "\"\"\"Initialize built-in pattern database as fallback\"\"\"",
        "reason": "Unknown",
        "context": "        \n        logger.info(\"No local Fabric installation found\")\n        return None\n    \n    def _initialize_pattern_database(self) -> Dict[str, FabricPattern]:\n        \"\"\"Initialize built-in pattern database as fallback\"\"\"\n        \n        patterns = {}\n        \n        # Analysis patterns"
      },
      {
        "line": 255,
        "code": "# Use built-in patterns as fallback",
        "reason": "Unknown",
        "context": "            if self.http_available:\n                remote_patterns = await self._discover_remote_patterns()\n                patterns.extend(remote_patterns)\n                logger.info(f\"Discovered {len(remote_patterns)} remote patterns\")\n            \n            # Use built-in patterns as fallback\n            if not patterns:\n                patterns = list(self._pattern_database.values())\n                logger.info(f\"Using {len(patterns)} built-in patterns as fallback\")\n            "
      },
      {
        "line": 258,
        "code": "logger.info(f\"Using {len(patterns)} built-in patterns as fallback\")",
        "reason": "Unknown",
        "context": "                logger.info(f\"Discovered {len(remote_patterns)} remote patterns\")\n            \n            # Use built-in patterns as fallback\n            if not patterns:\n                patterns = list(self._pattern_database.values())\n                logger.info(f\"Using {len(patterns)} built-in patterns as fallback\")\n            \n            # Cache the results\n            await self._cache_patterns(patterns)\n            "
      },
      {
        "line": 271,
        "code": "# Return built-in patterns as ultimate fallback",
        "reason": "Exception handling: except Exception as e:",
        "context": "            return patterns\n            \n        except Exception as e:\n            logger.error(f\"Pattern discovery failed: {e}\")\n            \n            # Return built-in patterns as ultimate fallback\n            return list(self._pattern_database.values())\n    \n    async def _discover_local_patterns(self) -> List[FabricPattern]:\n        \"\"\"Discover patterns from local Fabric installation\"\"\""
      },
      {
        "line": 362,
        "code": "# Use requests fallback",
        "reason": "Unknown",
        "context": "                async with self.session.get(api_url) as response:\n                    if response.status == 200:\n                        data = await response.json()\n                        patterns = await self._parse_remote_patterns(data)\n            else:\n                # Use requests fallback\n                import requests\n                response = requests.get(api_url)\n                if response.status_code == 200:\n                    data = response.json()"
      },
      {
        "line": 456,
        "code": "# Fallback: filter by category",
        "reason": "Unknown",
        "context": "                    for name in pattern_names \n                    if name in self.pattern_cache\n                ]\n                return patterns\n            \n            # Fallback: filter by category\n            category_map = {\n                PromptContext.ANALYSIS: \"analysis\",\n                PromptContext.CREATION: \"creation\",\n                PromptContext.RESEARCH: \"research\","
      }
    ],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [
      "Unclosed file handle"
    ],
    "integration_issues": [],
    "dependencies": [
      "os",
      "typing",
      "aiofiles",
      "pathlib",
      "logging",
      "datetime",
      "json"
    ],
    "circular_imports": []
  },
  "prompt_analyzer": {
    "module_path": "/mnt/c/Users/Brandon/AAI/agents/tool-selection/prompt_analyzer.py",
    "prp_category": "AGENTS_TOOL",
    "overall_status": "FAIL",
    "import_success": false,
    "import_time": 49.14949369430542,
    "import_error": "ModuleNotFoundError: No module named 'agents.tool_selection'\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/agents/tool-selection/prompt_analyzer.py\", line 13, in <module>\n    from .models import PromptContext, ContextAnalysis\nImportError: attempted relative import with no known parent package\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 995, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/agents/tool-selection/prompt_analyzer.py\", line 15, in <module>\n    from agents.tool_selection.models import PromptContext, ContextAnalysis\nModuleNotFoundError: No module named 'agents.tool_selection'\n",
    "functional_tests": {},
    "performance_metrics": {},
    "issues": [
      {
        "severity": "Critical",
        "type": "Import Failure",
        "details": "ModuleNotFoundError: No module named 'agents.tool_selection'\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/agents/tool-selection/prompt_analyzer.py\", line 13, in <module>\n    from .models import PromptContext, ContextAnalysis\nImportError: attempted relative import with no known parent package\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/mnt/c/Users/Brandon/AAI/tests/comprehensive_module_test.py\", line 290, in test_module_import\n    spec.loader.exec_module(module)\n  File \"<frozen importlib._bootstrap_external>\", line 995, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/mnt/c/Users/Brandon/AAI/agents/tool-selection/prompt_analyzer.py\", line 15, in <module>\n    from agents.tool_selection.models import PromptContext, ContextAnalysis\nModuleNotFoundError: No module named 'agents.tool_selection'\n"
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 12,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "missing_error_handling",
        "details": {
          "line": 177,
          "type": "Try without except",
          "content": "try:"
        }
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Async function without await"
      },
      {
        "severity": "High",
        "type": "Async Pattern Issue",
        "details": "Await in non-async function"
      }
    ],
    "fallback_triggers": [
      {
        "line": 222,
        "code": "# Fallback analysis",
        "reason": "Exception handling: except Exception as e:",
        "context": "            return analysis\n            \n        except Exception as e:\n            logger.error(f\"Prompt analysis failed: {e}\")\n            \n            # Fallback analysis\n            return ContextAnalysis(\n                original_prompt=prompt,\n                prompt_snippet=prompt[:100],\n                detected_context=PromptContext.ANALYSIS,  # Safe default"
      },
      {
        "line": 277,
        "code": "# Default fallback",
        "reason": "Unknown",
        "context": "            confidence = self._calculate_context_confidence(raw_score, prompt_snippet)\n            keywords = found_keywords.get(context, [])\n            \n            return context, confidence, keywords\n        \n        # Default fallback\n        return PromptContext.ANALYSIS, 0.70, []\n    \n    async def _validate_context_hint(self, prompt_snippet: str, context_hint: PromptContext) -> float:\n        \"\"\"Validate user-provided context hint\"\"\""
      }
    ],
    "async_issues": [
      "Async function without await",
      "Await in non-async function"
    ],
    "resource_leaks": [],
    "integration_issues": [],
    "dependencies": [
      "datetime",
      "logging",
      "re",
      "typing"
    ],
    "circular_imports": []
  }
}